var cov_bf38lgx71=function(){var path="/Users/desimiramitkova/Projects/etherlime/cli-commands/zk-proof/generate-verify.js";var hash="1a97735be207d70f2690d0288b53934a0fc4f031";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/cli-commands/zk-proof/generate-verify.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:11},end:{line:2,column:24}},"2":{start:{line:3,column:12},end:{line:3,column:31}},"3":{start:{line:4,column:13},end:{line:4,column:28}},"4":{start:{line:6,column:25},end:{line:6,column:63}},"5":{start:{line:7,column:22},end:{line:7,column:35}},"6":{start:{line:9,column:12},end:{line:15,column:1}},"7":{start:{line:10,column:1},end:{line:10,column:77}},"8":{start:{line:11,column:21},end:{line:11,column:102}},"9":{start:{line:12,column:18},end:{line:12,column:55}},"10":{start:{line:13,column:1},end:{line:13,column:61}},"11":{start:{line:14,column:1},end:{line:14,column:100}},"12":{start:{line:17,column:0},end:{line:19,column:1}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:12},end:{line:9,column:13}},loc:{start:{line:9,column:26},end:{line:15,column:1}},line:9}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"1a97735be207d70f2690d0288b53934a0fc4f031"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const zkSnark=(cov_bf38lgx71.s[0]++,require("snarkjs"));const fs=(cov_bf38lgx71.s[1]++,require("fs"));const dir=(cov_bf38lgx71.s[2]++,require("node-dir"));const path=(cov_bf38lgx71.s[3]++,require("path"));const trustedSetupPath=(cov_bf38lgx71.s[4]++,'./zero-knowledge-proof/trusted-setup');const contractsPath=(cov_bf38lgx71.s[5]++,`./contracts`);cov_bf38lgx71.s[6]++;const run=async vk=>{cov_bf38lgx71.f[0]++;cov_bf38lgx71.s[7]++;console.log('===== Creating Smart Contract for OnChain verification =====');const verifierKey=(cov_bf38lgx71.s[8]++,zkSnark.unstringifyBigInts(require(`${process.cwd()}/${trustedSetupPath}/${vk}`)));const template=(cov_bf38lgx71.s[9]++,zkSnark.generateVerifier(verifierKey));cov_bf38lgx71.s[10]++;fs.writeFileSync(`${contractsPath}/Verifier.sol`,template);cov_bf38lgx71.s[11]++;console.log('===== Smart Contract Created Successfully. Please check your contracts folder =====');};cov_bf38lgx71.s[12]++;module.exports={run};