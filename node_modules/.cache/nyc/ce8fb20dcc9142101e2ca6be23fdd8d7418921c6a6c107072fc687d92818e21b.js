var cov_ik0wxucnp=function(){var path="/Users/desimiramitkova/Projects/etherlime/deployer/etherlime-ganache-deployer/etherlime-ganache-deployer.js";var hash="d7a3396f3f1bb1095e109ae6035fbc1deb0c2d3f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/deployer/etherlime-ganache-deployer/etherlime-ganache-deployer.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:46}},"1":{start:{line:2,column:24},end:{line:2,column:85}},"2":{start:{line:3,column:27},end:{line:3,column:53}},"3":{start:{line:4,column:17},end:{line:4,column:63}},"4":{start:{line:5,column:32},end:{line:5,column:94}},"5":{start:{line:6,column:15},end:{line:6,column:70}},"6":{start:{line:18,column:2},end:{line:18,column:52}},"7":{start:{line:20,column:18},end:{line:20,column:45}},"8":{start:{line:22,column:2},end:{line:22,column:47}},"9":{start:{line:23,column:2},end:{line:23,column:25}},"10":{start:{line:27,column:2},end:{line:27,column:52}},"11":{start:{line:28,column:18},end:{line:28,column:45}},"12":{start:{line:29,column:2},end:{line:29,column:27}},"13":{start:{line:33,column:2},end:{line:35,column:3}},"14":{start:{line:34,column:3},end:{line:34,column:62}},"15":{start:{line:39,column:22},end:{line:39,column:38}},"16":{start:{line:40,column:2},end:{line:40,column:73}},"17":{start:{line:44,column:2},end:{line:44,column:39}},"18":{start:{line:45,column:2},end:{line:45,column:63}},"19":{start:{line:49,column:2},end:{line:49,column:148}},"20":{start:{line:50,column:2},end:{line:50,column:111}},"21":{start:{line:54,column:2},end:{line:54,column:129}},"22":{start:{line:55,column:2},end:{line:55,column:92}},"23":{start:{line:59,column:0},end:{line:59,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:1},end:{line:17,column:2}},loc:{start:{line:17,column:125},end:{line:24,column:2}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:26,column:1},end:{line:26,column:2}},loc:{start:{line:26,column:15},end:{line:30,column:2}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:1},end:{line:32,column:2}},loc:{start:{line:32,column:33},end:{line:36,column:2}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:38,column:1},end:{line:38,column:2}},loc:{start:{line:38,column:12},end:{line:41,column:2}},line:38},"4":{name:"(anonymous_4)",decl:{start:{line:43,column:1},end:{line:43,column:2}},loc:{start:{line:43,column:46},end:{line:46,column:2}},line:43},"5":{name:"(anonymous_5)",decl:{start:{line:48,column:1},end:{line:48,column:2}},loc:{start:{line:48,column:76},end:{line:51,column:2}},line:48},"6":{name:"(anonymous_6)",decl:{start:{line:53,column:1},end:{line:53,column:2}},loc:{start:{line:53,column:49},end:{line:56,column:2}},line:53}},branchMap:{"0":{loc:{start:{line:17,column:13},end:{line:17,column:66}},type:"default-arg",locations:[{start:{line:17,column:26},end:{line:17,column:66}}],line:17},"1":{loc:{start:{line:17,column:68},end:{line:17,column:105}},type:"default-arg",locations:[{start:{line:17,column:75},end:{line:17,column:105}}],line:17},"2":{loc:{start:{line:33,column:2},end:{line:35,column:3}},type:"if",locations:[{start:{line:33,column:2},end:{line:35,column:3}},{start:{line:33,column:2},end:{line:35,column:3}}],line:33}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0],"1":[0],"2":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"d7a3396f3f1bb1095e109ae6035fbc1deb0c2d3f"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const colors=(cov_ik0wxucnp.s[0]++,require('./../../utils/colors'));const JSONRPCDeployer=(cov_ik0wxucnp.s[1]++,require('./../jsonrpc-deployer/jsonrpc-private-key-deployer'));const ganacheSetupConfig=(cov_ik0wxucnp.s[2]++,require('./../setup.json'));const isNumber=(cov_ik0wxucnp.s[3]++,require('./../../utils/number-utils').isNumber);const EtherlimeGanacheWrapper=(cov_ik0wxucnp.s[4]++,require('./../../deployed-contract/etherlime-ganache-wrapper'));const logger=(cov_ik0wxucnp.s[5]++,require('./../../logger-service/logger-service').logger);class EtherlimeGanacheDeployer extends JSONRPCDeployer{/**
	 *
	 * Instantiates new deployer based on the GanacheCli Provider; If no privateKey and nodeUrl are specified, the deployer will be instantiated with the default values from cli-commands/ganache/setup.json
	 *
	 * @param {*} privateKey the private key for the deployer wallet/signer instance
	 * @param {*} port port number of the network to deploy on. This is the port number that is given to the class
	 * @param {*} defaultOverrides [Optional] default deployment overrides
	 */constructor(privateKey=(cov_ik0wxucnp.b[0][0]++,ganacheSetupConfig.accounts[0].secretKey),port=(cov_ik0wxucnp.b[1][0]++,ganacheSetupConfig.defaultPort),defaultOverrides){cov_ik0wxucnp.f[0]++;cov_ik0wxucnp.s[6]++;EtherlimeGanacheDeployer._validatePortInput(port);const nodeUrl=(cov_ik0wxucnp.s[7]++,`http://localhost:${port}/`);cov_ik0wxucnp.s[8]++;super(privateKey,nodeUrl,defaultOverrides);cov_ik0wxucnp.s[9]++;this.nodeUrl=nodeUrl;}setPort(port){cov_ik0wxucnp.f[1]++;cov_ik0wxucnp.s[10]++;EtherlimeGanacheDeployer._validatePortInput(port);const nodeUrl=(cov_ik0wxucnp.s[11]++,`http://localhost:${port}/`);cov_ik0wxucnp.s[12]++;this.setNodeUrl(nodeUrl);}static _validatePortInput(port){cov_ik0wxucnp.f[2]++;cov_ik0wxucnp.s[13]++;if(!isNumber(port)){cov_ik0wxucnp.b[2][0]++;cov_ik0wxucnp.s[14]++;throw new Error(`Passed port (${port}) is not valid port`);}else{cov_ik0wxucnp.b[2][1]++;}}toString(){cov_ik0wxucnp.f[3]++;const superString=(cov_ik0wxucnp.s[15]++,super.toString());cov_ik0wxucnp.s[16]++;return`Network: ${colors.colorNetwork(this.nodeUrl)}\n${superString}`;}async _waitForDeployTransaction(transaction){cov_ik0wxucnp.f[4]++;cov_ik0wxucnp.s[17]++;await this.provider.send('evm_mine');cov_ik0wxucnp.s[18]++;return this.provider.getTransactionReceipt(transaction.hash);}async _generateDeploymentResult(contract,transaction,transactionReceipt){cov_ik0wxucnp.f[5]++;cov_ik0wxucnp.s[19]++;logger.log(`Contract ${colors.colorName(contract.contractName)} deployed at address: ${colors.colorAddress(transactionReceipt.contractAddress)}`);cov_ik0wxucnp.s[20]++;return new EtherlimeGanacheWrapper(contract,transactionReceipt.contractAddress,this.signer,this.provider);}wrapDeployedContract(contract,contractAddress){cov_ik0wxucnp.f[6]++;cov_ik0wxucnp.s[21]++;logger.log(`Wrapping contract ${colors.colorName(contract.contractName)} at address: ${colors.colorAddress(contractAddress)}`);cov_ik0wxucnp.s[22]++;return new EtherlimeGanacheWrapper(contract,contractAddress,this.signer,this.provider);}}cov_ik0wxucnp.s[23]++;module.exports=EtherlimeGanacheDeployer;