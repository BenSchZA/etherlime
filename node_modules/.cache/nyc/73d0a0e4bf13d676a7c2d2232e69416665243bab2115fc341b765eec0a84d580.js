var cov_21edpdud5g=function(){var path="/Users/desimiramitkova/Projects/etherlime/packages/etherlime/deployed-contract/deployed-contract-wrapper.js";var hash="7f5be65c1fb472d431c1fbbae0766dbfbfb4df5a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/packages/etherlime/deployed-contract/deployed-contract-wrapper.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:55},end:{line:2,column:81}},"2":{start:{line:3,column:18},end:{line:3,column:55}},"3":{start:{line:4,column:15},end:{line:4,column:67}},"4":{start:{line:19,column:2},end:{line:19,column:67}},"5":{start:{line:20,column:2},end:{line:20,column:41}},"6":{start:{line:21,column:2},end:{line:21,column:23}},"7":{start:{line:22,column:2},end:{line:22,column:27}},"8":{start:{line:23,column:2},end:{line:23,column:28}},"9":{start:{line:24,column:2},end:{line:24,column:77}},"10":{start:{line:25,column:2},end:{line:25,column:47}},"11":{start:{line:26,column:2},end:{line:26,column:42}},"12":{start:{line:27,column:2},end:{line:27,column:40}},"13":{start:{line:28,column:2},end:{line:28,column:42}},"14":{start:{line:29,column:2},end:{line:29,column:38}},"15":{start:{line:33,column:2},end:{line:35,column:3}},"16":{start:{line:34,column:3},end:{line:34,column:84}},"17":{start:{line:37,column:2},end:{line:39,column:3}},"18":{start:{line:38,column:3},end:{line:38,column:88}},"19":{start:{line:41,column:2},end:{line:43,column:3}},"20":{start:{line:42,column:3},end:{line:42,column:129}},"21":{start:{line:55,column:18},end:{line:55,column:92}},"22":{start:{line:56,column:2},end:{line:56,column:138}},"23":{start:{line:58,column:29},end:{line:58,column:53}},"24":{start:{line:59,column:2},end:{line:59,column:71}},"25":{start:{line:60,column:22},end:{line:60,column:83}},"26":{start:{line:61,column:2},end:{line:61,column:192}},"27":{start:{line:62,column:2},end:{line:62,column:28}},"28":{start:{line:66,column:2},end:{line:69,column:3}},"29":{start:{line:67,column:3},end:{line:67,column:192}},"30":{start:{line:68,column:3},end:{line:68,column:189}},"31":{start:{line:70,column:2},end:{line:70,column:28}},"32":{start:{line:86,column:18},end:{line:86,column:50}},"33":{start:{line:87,column:2},end:{line:87,column:118}},"34":{start:{line:91,column:0},end:{line:91,column:41}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:1},end:{line:18,column:2}},loc:{start:{line:18,column:58},end:{line:30,column:2}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:32,column:1},end:{line:32,column:2}},loc:{start:{line:32,column:61},end:{line:44,column:2}},line:32},"2":{name:"(anonymous_2)",decl:{start:{line:53,column:1},end:{line:53,column:2}},loc:{start:{line:53,column:64},end:{line:63,column:2}},line:53},"3":{name:"(anonymous_3)",decl:{start:{line:65,column:1},end:{line:65,column:2}},loc:{start:{line:65,column:65},end:{line:71,column:2}},line:65},"4":{name:"(anonymous_4)",decl:{start:{line:85,column:1},end:{line:85,column:2}},loc:{start:{line:85,column:97},end:{line:88,column:2}},line:85}},branchMap:{"0":{loc:{start:{line:33,column:2},end:{line:35,column:3}},type:"if",locations:[{start:{line:33,column:2},end:{line:35,column:3}},{start:{line:33,column:2},end:{line:35,column:3}}],line:33},"1":{loc:{start:{line:37,column:2},end:{line:39,column:3}},type:"if",locations:[{start:{line:37,column:2},end:{line:39,column:3}},{start:{line:37,column:2},end:{line:39,column:3}}],line:37},"2":{loc:{start:{line:41,column:2},end:{line:43,column:3}},type:"if",locations:[{start:{line:41,column:2},end:{line:43,column:3}},{start:{line:41,column:2},end:{line:43,column:3}}],line:41},"3":{loc:{start:{line:55,column:18},end:{line:55,column:92}},type:"cond-expr",locations:[{start:{line:55,column:39},end:{line:55,column:87}},{start:{line:55,column:90},end:{line:55,column:92}}],line:55},"4":{loc:{start:{line:60,column:22},end:{line:60,column:83}},type:"cond-expr",locations:[{start:{line:60,column:43},end:{line:60,column:59}},{start:{line:60,column:62},end:{line:60,column:83}}],line:60},"5":{loc:{start:{line:66,column:2},end:{line:69,column:3}},type:"if",locations:[{start:{line:66,column:2},end:{line:69,column:3}},{start:{line:66,column:2},end:{line:69,column:3}}],line:66}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"7f5be65c1fb472d431c1fbbae0766dbfbfb4df5a"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const ethers=(cov_21edpdud5g.s[0]++,require('ethers'));const{isAddress,isSigner,isValidContract,colors}=(cov_21edpdud5g.s[1]++,require('etherlime-utils'));const logsStore=(cov_21edpdud5g.s[2]++,require('./../logs-store/logs-store'));const logger=(cov_21edpdud5g.s[3]++,require('./../logger-service/logger-service').logger);class DeployedContractWrapper{/**
	 *
	 * Object representing deployed contract allowing user to interact with deployed contracts
	 *
	 * @param {*} contract The deployed contract descriptor
	 * @param {*} contractAddress The address of the deployed contract
	 * @param {*} signer The signer that has deployed this contract
	 * @param {*} provider ethers provider
	 */constructor(contract,contractAddress,signer,provider){cov_21edpdud5g.f[0]++;cov_21edpdud5g.s[4]++;this._validateInput(contract,contractAddress,signer,provider);cov_21edpdud5g.s[5]++;this.contractAddress=contractAddress;cov_21edpdud5g.s[6]++;this.signer=signer;cov_21edpdud5g.s[7]++;this.provider=provider;cov_21edpdud5g.s[8]++;this._contract=contract;cov_21edpdud5g.s[9]++;this.contract=new ethers.Contract(contractAddress,contract.abi,signer);cov_21edpdud5g.s[10]++;Object.assign(this,this.contract.functions);cov_21edpdud5g.s[11]++;this.interface=this.contract.interface;cov_21edpdud5g.s[12]++;this.estimate=this.contract.estimate;cov_21edpdud5g.s[13]++;this.functions=this.contract.functions;cov_21edpdud5g.s[14]++;this.filters=this.contract.filters;}_validateInput(contract,contractAddress,signer,provider){cov_21edpdud5g.f[1]++;cov_21edpdud5g.s[15]++;if(!isSigner(signer)){cov_21edpdud5g.b[0][0]++;cov_21edpdud5g.s[16]++;throw new Error('Passed signer is not a valid signer instance of ethers Wallet');}else{cov_21edpdud5g.b[0][1]++;}cov_21edpdud5g.s[17]++;if(!isAddress(contractAddress)){cov_21edpdud5g.b[1][0]++;cov_21edpdud5g.s[18]++;throw new Error(`Passed contract address (${contractAddress}) is not valid address`);}else{cov_21edpdud5g.b[1][1]++;}cov_21edpdud5g.s[19]++;if(!isValidContract(contract)){cov_21edpdud5g.b[2][0]++;cov_21edpdud5g.s[20]++;throw new Error(`Passed contract is not a valid contract object. It needs to have bytecode, abi and contractName properties`);}else{cov_21edpdud5g.b[2][1]++;}}/**
	 *
	 * Use this method to wait for transaction and print verbose logs
	 *
	 * @param {*} transactionHash The transaction hash you are waiting for
	 * @param {*} transactionLabel [Optional] A human readable label to help you differentiate you transaction
	 */async verboseWaitForTransaction(transaction,transactionLabel){cov_21edpdud5g.f[2]++;let labelPart=(cov_21edpdud5g.s[21]++,transactionLabel?(cov_21edpdud5g.b[3][0]++,`labeled ${colors.colorName(transactionLabel)} `):(cov_21edpdud5g.b[3][1]++,''));cov_21edpdud5g.s[22]++;logger.log(`Waiting for transaction ${labelPart}to be included in a block and mined: ${colors.colorTransactionHash(transaction.hash)}`);const transactionReceipt=(cov_21edpdud5g.s[23]++,await transaction.wait());cov_21edpdud5g.s[24]++;await this._postValidateTransaction(transaction,transactionReceipt);const actionLabel=(cov_21edpdud5g.s[25]++,transactionLabel?(cov_21edpdud5g.b[4][0]++,transactionLabel):(cov_21edpdud5g.b[4][1]++,this.constructor.name));cov_21edpdud5g.s[26]++;await this._logAction(this.constructor.name,actionLabel,transaction.hash,0,transaction.gasPrice.toString(),transactionReceipt.gasUsed.toString(),'Successfully Waited For Transaction');cov_21edpdud5g.s[27]++;return transactionReceipt;}async _postValidateTransaction(transaction,transactionReceipt){cov_21edpdud5g.f[3]++;cov_21edpdud5g.s[28]++;if(transactionReceipt.status===0){cov_21edpdud5g.b[5][0]++;cov_21edpdud5g.s[29]++;await this._logAction(this.constructor.name,this._contract.contractName,transaction.hash,1,transaction.gasPrice.toString(),transactionReceipt.gasUsed.toString(),'Transaction failed');cov_21edpdud5g.s[30]++;throw new Error(`Transaction ${colors.colorTransactionHash(transactionReceipt.transactionHash)} ${colors.colorFailure('failed')}. Please check etherscan for better reason explanation.`);}else{cov_21edpdud5g.b[5][1]++;}cov_21edpdud5g.s[31]++;return transactionReceipt;}/**
	 *
	 * Override this for custom logging functionality
	 *
	 * @param {*} deployerType type of deployer
	 * @param {*} nameOrLabel name of the contract or label of the transaction
	 * @param {*} transactionHash transaction hash if available
	 * @param {*} status 0 - success, 1 - failure
	 * @param {*} gasPrice the gas price param that was used by this transaction
	 * @param {*} gasUsed the gas used by this transaction
	 * @param {*} result arbitrary result text
	 */async _logAction(deployerType,nameOrLabel,transactionHash,status,gasPrice,gasUsed,result){cov_21edpdud5g.f[4]++;const network=(cov_21edpdud5g.s[32]++,await this.provider.getNetwork());cov_21edpdud5g.s[33]++;logsStore.logAction(deployerType,nameOrLabel,transactionHash,status,gasPrice,gasUsed,network.chainId,result);}}cov_21edpdud5g.s[34]++;module.exports=DeployedContractWrapper;