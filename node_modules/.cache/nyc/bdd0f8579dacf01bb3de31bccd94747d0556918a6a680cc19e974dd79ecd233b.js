var cov_2nyaznl08w=function(){var path="/Users/desimiramitkova/Projects/etherlime/cli-commands/compiler/etherlime-contract-schema/index.js";var hash="2eba91230f07c395d30952108f55cc2e18a6eaec";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/cli-commands/compiler/etherlime-contract-schema/index.js",statementMap:{"0":{start:{line:1,column:19},end:{line:1,column:61}},"1":{start:{line:26,column:17},end:{line:107,column:1}},"2":{start:{line:33,column:6},end:{line:39,column:7}},"3":{start:{line:34,column:8},end:{line:38,column:9}},"4":{start:{line:35,column:10},end:{line:35,column:35}},"5":{start:{line:37,column:10},end:{line:37,column:28}},"6":{start:{line:40,column:6},end:{line:40,column:19}},"7":{start:{line:48,column:6},end:{line:50,column:7}},"8":{start:{line:49,column:8},end:{line:49,column:29}},"9":{start:{line:51,column:6},end:{line:51,column:19}},"10":{start:{line:59,column:6},end:{line:61,column:7}},"11":{start:{line:60,column:8},end:{line:60,column:29}},"12":{start:{line:62,column:6},end:{line:62,column:19}},"13":{start:{line:76,column:26},end:{line:76,column:54}},"14":{start:{line:79,column:6},end:{line:83,column:7}},"15":{start:{line:80,column:8},end:{line:80,column:23}},"16":{start:{line:82,column:8},end:{line:82,column:20}},"17":{start:{line:89,column:6},end:{line:91,column:7}},"18":{start:{line:90,column:8},end:{line:90,column:18}},"19":{start:{line:92,column:6},end:{line:92,column:19}},"20":{start:{line:101,column:6},end:{line:103,column:7}},"21":{start:{line:102,column:8},end:{line:102,column:46}},"22":{start:{line:104,column:6},end:{line:104,column:19}},"23":{start:{line:115,column:13},end:{line:124,column:1}},"24":{start:{line:117,column:20},end:{line:119,column:3}},"25":{start:{line:118,column:4},end:{line:118,column:12}},"26":{start:{line:121,column:2},end:{line:123,column:3}},"27":{start:{line:122,column:4},end:{line:122,column:31}},"28":{start:{line:136,column:12},end:{line:143,column:1}},"29":{start:{line:137,column:16},end:{line:137,column:53}},"30":{start:{line:138,column:2},end:{line:142,column:3}},"31":{start:{line:139,column:4},end:{line:141,column:12}},"32":{start:{line:140,column:6},end:{line:140,column:22}},"33":{start:{line:147,column:16},end:{line:186,column:1}},"34":{start:{line:148,column:19},end:{line:148,column:21}},"35":{start:{line:150,column:2},end:{line:175,column:5}},"36":{start:{line:151,column:19},end:{line:151,column:34}},"37":{start:{line:154,column:18},end:{line:154,column:43}},"38":{start:{line:156,column:4},end:{line:168,column:5}},"39":{start:{line:156,column:17},end:{line:156,column:18}},"40":{start:{line:157,column:19},end:{line:157,column:29}},"41":{start:{line:159,column:6},end:{line:165,column:7}},"42":{start:{line:160,column:25},end:{line:163,column:12}},"43":{start:{line:162,column:12},end:{line:162,column:28}},"44":{start:{line:164,column:8},end:{line:164,column:47}},"45":{start:{line:167,column:6},end:{line:167,column:31}},"46":{start:{line:170,column:4},end:{line:172,column:5}},"47":{start:{line:171,column:6},end:{line:171,column:50}},"48":{start:{line:174,column:4},end:{line:174,column:28}},"49":{start:{line:177,column:2},end:{line:181,column:5}},"50":{start:{line:178,column:4},end:{line:180,column:5}},"51":{start:{line:179,column:6},end:{line:179,column:46}},"52":{start:{line:183,column:2},end:{line:183,column:40}},"53":{start:{line:185,column:2},end:{line:185,column:19}},"54":{start:{line:188,column:0},end:{line:190,column:1}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:32,column:17},end:{line:32,column:18}},loc:{start:{line:32,column:28},end:{line:41,column:5}},line:32},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:17},end:{line:47,column:18}},loc:{start:{line:47,column:28},end:{line:52,column:5}},line:47},"2":{name:"(anonymous_2)",decl:{start:{line:58,column:17},end:{line:58,column:18}},loc:{start:{line:58,column:28},end:{line:63,column:5}},line:58},"3":{name:"(anonymous_3)",decl:{start:{line:75,column:17},end:{line:75,column:18}},loc:{start:{line:75,column:33},end:{line:84,column:5}},line:75},"4":{name:"(anonymous_4)",decl:{start:{line:88,column:17},end:{line:88,column:18}},loc:{start:{line:88,column:28},end:{line:93,column:5}},line:88},"5":{name:"(anonymous_5)",decl:{start:{line:100,column:17},end:{line:100,column:18}},loc:{start:{line:100,column:28},end:{line:105,column:5}},line:100},"6":{name:"(anonymous_6)",decl:{start:{line:115,column:13},end:{line:115,column:14}},loc:{start:{line:115,column:22},end:{line:124,column:1}},line:115},"7":{name:"(anonymous_7)",decl:{start:{line:117,column:20},end:{line:117,column:21}},loc:{start:{line:117,column:27},end:{line:119,column:3}},line:117},"8":{name:"(anonymous_8)",decl:{start:{line:121,column:9},end:{line:121,column:10}},loc:{start:{line:121,column:18},end:{line:123,column:3}},line:121},"9":{name:"(anonymous_9)",decl:{start:{line:136,column:12},end:{line:136,column:13}},loc:{start:{line:136,column:24},end:{line:143,column:1}},line:136},"10":{name:"(anonymous_10)",decl:{start:{line:138,column:9},end:{line:138,column:10}},loc:{start:{line:138,column:18},end:{line:142,column:3}},line:138},"11":{name:"(anonymous_11)",decl:{start:{line:139,column:26},end:{line:139,column:27}},loc:{start:{line:139,column:40},end:{line:141,column:5}},line:139},"12":{name:"(anonymous_12)",decl:{start:{line:147,column:16},end:{line:147,column:17}},loc:{start:{line:147,column:39},end:{line:186,column:1}},line:147},"13":{name:"(anonymous_13)",decl:{start:{line:150,column:34},end:{line:150,column:35}},loc:{start:{line:150,column:43},end:{line:175,column:3}},line:150},"14":{name:"(anonymous_14)",decl:{start:{line:161,column:15},end:{line:161,column:16}},loc:{start:{line:161,column:22},end:{line:163,column:11}},line:161},"15":{name:"(anonymous_15)",decl:{start:{line:177,column:32},end:{line:177,column:33}},loc:{start:{line:177,column:41},end:{line:181,column:3}},line:177}},branchMap:{"0":{loc:{start:{line:33,column:6},end:{line:39,column:7}},type:"if",locations:[{start:{line:33,column:6},end:{line:39,column:7}},{start:{line:33,column:6},end:{line:39,column:7}}],line:33},"1":{loc:{start:{line:48,column:6},end:{line:50,column:7}},type:"if",locations:[{start:{line:48,column:6},end:{line:50,column:7}},{start:{line:48,column:6},end:{line:50,column:7}}],line:48},"2":{loc:{start:{line:48,column:10},end:{line:48,column:43}},type:"binary-expr",locations:[{start:{line:48,column:10},end:{line:48,column:15}},{start:{line:48,column:19},end:{line:48,column:43}}],line:48},"3":{loc:{start:{line:59,column:6},end:{line:61,column:7}},type:"if",locations:[{start:{line:59,column:6},end:{line:61,column:7}},{start:{line:59,column:6},end:{line:61,column:7}}],line:59},"4":{loc:{start:{line:59,column:10},end:{line:59,column:43}},type:"binary-expr",locations:[{start:{line:59,column:10},end:{line:59,column:15}},{start:{line:59,column:19},end:{line:59,column:43}}],line:59},"5":{loc:{start:{line:76,column:26},end:{line:76,column:54}},type:"binary-expr",locations:[{start:{line:76,column:26},end:{line:76,column:43}},{start:{line:76,column:47},end:{line:76,column:54}}],line:76},"6":{loc:{start:{line:79,column:6},end:{line:83,column:7}},type:"if",locations:[{start:{line:79,column:6},end:{line:83,column:7}},{start:{line:79,column:6},end:{line:83,column:7}}],line:79},"7":{loc:{start:{line:89,column:6},end:{line:91,column:7}},type:"if",locations:[{start:{line:89,column:6},end:{line:91,column:7}},{start:{line:89,column:6},end:{line:91,column:7}}],line:89},"8":{loc:{start:{line:101,column:6},end:{line:103,column:7}},type:"if",locations:[{start:{line:101,column:6},end:{line:103,column:7}},{start:{line:101,column:6},end:{line:103,column:7}}],line:101},"9":{loc:{start:{line:154,column:18},end:{line:154,column:43}},type:"binary-expr",locations:[{start:{line:154,column:18},end:{line:154,column:34}},{start:{line:154,column:38},end:{line:154,column:43}}],line:154},"10":{loc:{start:{line:156,column:20},end:{line:156,column:61}},type:"binary-expr",locations:[{start:{line:156,column:20},end:{line:156,column:39}},{start:{line:156,column:43},end:{line:156,column:61}}],line:156},"11":{loc:{start:{line:159,column:6},end:{line:165,column:7}},type:"if",locations:[{start:{line:159,column:6},end:{line:165,column:7}},{start:{line:159,column:6},end:{line:165,column:7}}],line:159},"12":{loc:{start:{line:170,column:4},end:{line:172,column:5}},type:"if",locations:[{start:{line:170,column:4},end:{line:172,column:5}},{start:{line:170,column:4},end:{line:172,column:5}}],line:170},"13":{loc:{start:{line:178,column:4},end:{line:180,column:5}},type:"if",locations:[{start:{line:178,column:4},end:{line:180,column:5}},{start:{line:178,column:4},end:{line:180,column:5}}],line:178}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"2eba91230f07c395d30952108f55cc2e18a6eaec"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const pkgVersion=(cov_2nyaznl08w.s[0]++,require("./../../../package.json").version);/**
 * Property definitions for Contract Objects
 *
 * Describes canonical output properties as sourced from some "dirty" input
 * object. Describes normalization process to account for deprecated and/or
 * nonstandard keys and values.
 *
 * Maps (key -> property) where:
 *  - `key` is the top-level output key matching up with those in the schema
 *  - `property` is an object with optional values:
 *      - `sources`: list of sources (see below); default `key`
 *      - `transform`: function(value) -> transformed value; default x -> x
 *
 * Each source represents a means to select a value from dirty object.
 * Allows:
 *  - dot-separated (`.`) string, corresponding to path to value in dirty
 *    object
 *  - function(dirtyObj) -> (cleanValue | undefined)
 *
 * The optional `transform` parameter standardizes value regardless of source,
 * for purposes of ensuring data type and/or string schemas.
 */let properties=(cov_2nyaznl08w.s[1]++,{"contractName":{"sources":["contractName","contract_name"]},"abi":{"sources":["abi","interface"],"transform":value=>{cov_2nyaznl08w.f[0]++;cov_2nyaznl08w.s[2]++;if(typeof value==="string"){cov_2nyaznl08w.b[0][0]++;cov_2nyaznl08w.s[3]++;try{cov_2nyaznl08w.s[4]++;value=JSON.parse(value);}catch(e){cov_2nyaznl08w.s[5]++;value=undefined;}}else{cov_2nyaznl08w.b[0][1]++;}cov_2nyaznl08w.s[6]++;return value;}},"bytecode":{"sources":["bytecode","binary","unlinked_binary","evm.bytecode.object"],"transform":value=>{cov_2nyaznl08w.f[1]++;cov_2nyaznl08w.s[7]++;if((cov_2nyaznl08w.b[2][0]++,value)&&(cov_2nyaznl08w.b[2][1]++,value.indexOf("0x")!=0)){cov_2nyaznl08w.b[1][0]++;cov_2nyaznl08w.s[8]++;value="0x"+value;}else{cov_2nyaznl08w.b[1][1]++;}cov_2nyaznl08w.s[9]++;return value;}},"deployedBytecode":{"sources":["deployedBytecode","runtimeBytecode","evm.deployedBytecode.object"],"transform":value=>{cov_2nyaznl08w.f[2]++;cov_2nyaznl08w.s[10]++;if((cov_2nyaznl08w.b[4][0]++,value)&&(cov_2nyaznl08w.b[4][1]++,value.indexOf("0x")!=0)){cov_2nyaznl08w.b[3][0]++;cov_2nyaznl08w.s[11]++;value="0x"+value;}else{cov_2nyaznl08w.b[3][1]++;}cov_2nyaznl08w.s[12]++;return value;}},"sourceMap":{"sources":["sourceMap","srcmap","evm.bytecode.sourceMap"]},"deployedSourceMap":{"sources":["deployedSourceMap","srcmapRuntime","evm.deployedBytecode.sourceMap"]},"source":{},"sourcePath":{},"ast":{},"legacyAST":{"transform":(value,obj)=>{cov_2nyaznl08w.f[3]++;let schemaVersion=(cov_2nyaznl08w.s[13]++,(cov_2nyaznl08w.b[5][0]++,obj.schemaVersion)||(cov_2nyaznl08w.b[5][1]++,"0.0.0"));// legacyAST introduced in v2.0.0
cov_2nyaznl08w.s[14]++;if(schemaVersion[0]<2){cov_2nyaznl08w.b[6][0]++;cov_2nyaznl08w.s[15]++;return obj.ast;}else{cov_2nyaznl08w.b[6][1]++;cov_2nyaznl08w.s[16]++;return value;}}},"compiler":{},"networks":{"transform":value=>{cov_2nyaznl08w.f[4]++;cov_2nyaznl08w.s[17]++;if(value===undefined){cov_2nyaznl08w.b[7][0]++;cov_2nyaznl08w.s[18]++;value={};}else{cov_2nyaznl08w.b[7][1]++;}cov_2nyaznl08w.s[19]++;return value;}},"schemaVersion":{"sources":["schemaVersion","schema_version"]},"updatedAt":{"sources":["updatedAt","updated_at"],"transform":value=>{cov_2nyaznl08w.f[5]++;cov_2nyaznl08w.s[20]++;if(typeof value==="number"){cov_2nyaznl08w.b[8][0]++;cov_2nyaznl08w.s[21]++;value=new Date(value).toISOString();}else{cov_2nyaznl08w.b[8][1]++;}cov_2nyaznl08w.s[22]++;return value;}}});/**
 * Construct a getter for a given key, possibly applying some post-retrieve
 * transformation on the resulting value.
 *
 * @return {Function} Accepting dirty object and returning value || undefined
 */cov_2nyaznl08w.s[23]++;let getter=key=>{cov_2nyaznl08w.f[6]++;cov_2nyaznl08w.s[24]++;const transform=x=>{cov_2nyaznl08w.f[7]++;cov_2nyaznl08w.s[25]++;return x;};cov_2nyaznl08w.s[26]++;return obj=>{cov_2nyaznl08w.f[8]++;cov_2nyaznl08w.s[27]++;return transform(obj[key]);};};/**
 * Chains together a series of function(obj) -> value, passing resulting
 * returned value to next function in chain.
 *
 * Accepts any number of functions passed as arguments
 * @return {Function} Accepting initial object, returning end-of-chain value
 *
 * Assumes all intermediary values to be objects, with well-formed sequence
 * of operations.
 */cov_2nyaznl08w.s[28]++;let chain=function(){cov_2nyaznl08w.f[9]++;let getters=(cov_2nyaznl08w.s[29]++,Array.prototype.slice.call(arguments));cov_2nyaznl08w.s[30]++;return obj=>{cov_2nyaznl08w.f[10]++;cov_2nyaznl08w.s[31]++;return getters.reduce((cur,get)=>{cov_2nyaznl08w.f[11]++;cov_2nyaznl08w.s[32]++;return get(cur);},obj);};};cov_2nyaznl08w.s[33]++;let normalize=(objDirty,options)=>{cov_2nyaznl08w.f[12]++;let normalized=(cov_2nyaznl08w.s[34]++,{});cov_2nyaznl08w.s[35]++;Object.keys(properties).forEach(key=>{cov_2nyaznl08w.f[13]++;let property=(cov_2nyaznl08w.s[36]++,properties[key]);let value;let sources=(cov_2nyaznl08w.s[37]++,(cov_2nyaznl08w.b[9][0]++,property.sources)||(cov_2nyaznl08w.b[9][1]++,[key]));cov_2nyaznl08w.s[38]++;for(let i=(cov_2nyaznl08w.s[39]++,0);(cov_2nyaznl08w.b[10][0]++,value===undefined)&&(cov_2nyaznl08w.b[10][1]++,i<sources.length);i++){let source=(cov_2nyaznl08w.s[40]++,sources[i]);cov_2nyaznl08w.s[41]++;if(typeof source==="string"){cov_2nyaznl08w.b[11][0]++;let traversals=(cov_2nyaznl08w.s[42]++,source.split(".").map(k=>{cov_2nyaznl08w.f[14]++;cov_2nyaznl08w.s[43]++;return getter(k);}));cov_2nyaznl08w.s[44]++;source=chain.apply(null,traversals);}else{cov_2nyaznl08w.b[11][1]++;}cov_2nyaznl08w.s[45]++;value=source(objDirty);}cov_2nyaznl08w.s[46]++;if(property.transform){cov_2nyaznl08w.b[12][0]++;cov_2nyaznl08w.s[47]++;value=property.transform(value,objDirty);}else{cov_2nyaznl08w.b[12][1]++;}cov_2nyaznl08w.s[48]++;normalized[key]=value;});cov_2nyaznl08w.s[49]++;Object.keys(objDirty).forEach(key=>{cov_2nyaznl08w.f[15]++;cov_2nyaznl08w.s[50]++;if(key.indexOf("x-")===0){cov_2nyaznl08w.b[13][0]++;cov_2nyaznl08w.s[51]++;normalized[key]=getter(key)(objDirty);}else{cov_2nyaznl08w.b[13][1]++;}});cov_2nyaznl08w.s[52]++;normalized.schemaVersion=pkgVersion;cov_2nyaznl08w.s[53]++;return normalized;};cov_2nyaznl08w.s[54]++;module.exports={normalize};