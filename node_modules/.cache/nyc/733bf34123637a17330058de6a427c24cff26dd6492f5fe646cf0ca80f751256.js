var cov_2j3q6uwi7i=function(){var path="/Users/desimiramitkova/Projects/etherlime/deployer/jsonrpc-deployer/jsonrpc-private-key-deployer.js";var hash="163859b8e9f55acf7b455dcdf5f51b3cf563084f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/deployer/jsonrpc-deployer/jsonrpc-private-key-deployer.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:14},end:{line:2,column:54}},"2":{start:{line:4,column:27},end:{line:4,column:63}},"3":{start:{line:5,column:15},end:{line:5,column:46}},"4":{start:{line:6,column:15},end:{line:6,column:70}},"5":{start:{line:7,column:32},end:{line:7,column:33}},"6":{start:{line:20,column:2},end:{line:20,column:55}},"7":{start:{line:21,column:2},end:{line:27,column:3}},"8":{start:{line:22,column:3},end:{line:22,column:72}},"9":{start:{line:23,column:3},end:{line:23,column:74}},"10":{start:{line:24,column:3},end:{line:24,column:46}},"11":{start:{line:26,column:3},end:{line:26,column:69}},"12":{start:{line:28,column:2},end:{line:28,column:57}},"13":{start:{line:29,column:2},end:{line:29,column:25}},"14":{start:{line:31,column:2},end:{line:31,column:79}},"15":{start:{line:35,column:2},end:{line:35,column:55}},"16":{start:{line:37,column:28},end:{line:37,column:73}},"17":{start:{line:38,column:2},end:{line:38,column:38}},"18":{start:{line:39,column:2},end:{line:39,column:25}},"19":{start:{line:43,column:2},end:{line:45,column:3}},"20":{start:{line:44,column:3},end:{line:44,column:72}},"21":{start:{line:49,column:22},end:{line:49,column:38}},"22":{start:{line:50,column:2},end:{line:50,column:73}},"23":{start:{line:54,column:0},end:{line:54,column:43}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:1},end:{line:18,column:2}},loc:{start:{line:18,column:52},end:{line:32,column:2}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:34,column:1},end:{line:34,column:2}},loc:{start:{line:34,column:21},end:{line:40,column:2}},line:34},"2":{name:"(anonymous_2)",decl:{start:{line:42,column:1},end:{line:42,column:2}},loc:{start:{line:42,column:35},end:{line:46,column:2}},line:42},"3":{name:"(anonymous_3)",decl:{start:{line:48,column:1},end:{line:48,column:2}},loc:{start:{line:48,column:12},end:{line:51,column:2}},line:48}},branchMap:{"0":{loc:{start:{line:21,column:2},end:{line:27,column:3}},type:"if",locations:[{start:{line:21,column:2},end:{line:27,column:3}},{start:{line:21,column:2},end:{line:27,column:3}}],line:21},"1":{loc:{start:{line:43,column:2},end:{line:45,column:3}},type:"if",locations:[{start:{line:43,column:2},end:{line:45,column:3}},{start:{line:43,column:2},end:{line:45,column:3}}],line:43}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"163859b8e9f55acf7b455dcdf5f51b3cf563084f"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const ethers=(cov_2j3q6uwi7i.s[0]++,require('ethers'));const isUrl=(cov_2j3q6uwi7i.s[1]++,require('./../../utils/url-utils').isUrl);const PrivateKeyDeployer=(cov_2j3q6uwi7i.s[2]++,require('./../private-key-deployer'));const colors=(cov_2j3q6uwi7i.s[3]++,require('./../../utils/colors'));const logger=(cov_2j3q6uwi7i.s[4]++,require('./../../logger-service/logger-service').logger);const COVERAGE_PROVIDER_INDEX=(cov_2j3q6uwi7i.s[5]++,1);// This is the index of the desired provider located in global.providers. We have two providers there: one for coverage which is listening for blocks and one for deploying contracts
class JSONRPCPrivateKeyDeployer extends PrivateKeyDeployer{/**
	 *
	 * Instantiates new deployer based on the JSONRPC Provider Address (for example: 'http://localhost:8545/') and private key based deployment wallet/signer instance
	 *
	 * @param {*} privateKey the private key for the deployer wallet/signer instance
	 * @param {*} nodeUrl url of the network to deploy on. This is the node url address that is given to the class
	 * @param {*} defaultOverrides [Optional] default deployment overrides
	 */constructor(privateKey,nodeUrl,defaultOverrides){cov_2j3q6uwi7i.f[0]++;let localNodeProvider;cov_2j3q6uwi7i.s[6]++;JSONRPCPrivateKeyDeployer._validateUrlInput(nodeUrl);cov_2j3q6uwi7i.s[7]++;if(global.coverageSubprovider){cov_2j3q6uwi7i.b[0][0]++;cov_2j3q6uwi7i.s[8]++;global.provider._providers[COVERAGE_PROVIDER_INDEX].rpcUrl=nodeUrl;cov_2j3q6uwi7i.s[9]++;localNodeProvider=new ethers.providers.Web3Provider(global.provider);cov_2j3q6uwi7i.s[10]++;localNodeProvider.connection.url=nodeUrl;}else{cov_2j3q6uwi7i.b[0][1]++;cov_2j3q6uwi7i.s[11]++;localNodeProvider=new ethers.providers.JsonRpcProvider(nodeUrl);}cov_2j3q6uwi7i.s[12]++;super(privateKey,localNodeProvider,defaultOverrides);cov_2j3q6uwi7i.s[13]++;this.nodeUrl=nodeUrl;cov_2j3q6uwi7i.s[14]++;logger.log(`JSONRPC Deployer Network: ${colors.colorNetwork(this.nodeUrl)}`);}setNodeUrl(nodeUrl){cov_2j3q6uwi7i.f[1]++;cov_2j3q6uwi7i.s[15]++;JSONRPCPrivateKeyDeployer._validateUrlInput(nodeUrl);const localNodeProvider=(cov_2j3q6uwi7i.s[16]++,new ethers.providers.JsonRpcProvider(nodeUrl));cov_2j3q6uwi7i.s[17]++;this.setProvider(localNodeProvider);cov_2j3q6uwi7i.s[18]++;this.nodeUrl=nodeUrl;}static _validateUrlInput(nodeUrl){cov_2j3q6uwi7i.f[2]++;cov_2j3q6uwi7i.s[19]++;if(!isUrl(nodeUrl)){cov_2j3q6uwi7i.b[1][0]++;cov_2j3q6uwi7i.s[20]++;throw new Error(`Passed contract url (${nodeUrl}) is not valid url`);}else{cov_2j3q6uwi7i.b[1][1]++;}}toString(){cov_2j3q6uwi7i.f[3]++;const superString=(cov_2j3q6uwi7i.s[21]++,super.toString());cov_2j3q6uwi7i.s[22]++;return`Network: ${colors.colorNetwork(this.nodeUrl)}\n${superString}`;}}cov_2j3q6uwi7i.s[23]++;module.exports=JSONRPCPrivateKeyDeployer;