var cov_25qaocwgoy=function(){var path="/Users/desimiramitkova/Projects/etherlime/deployed-contract/deployed-contract-wrapper.js";var hash="7ce4dbab7bd7db705f975edf469b26269d042809";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/deployed-contract/deployed-contract-wrapper.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:18},end:{line:2,column:63}},"2":{start:{line:3,column:17},end:{line:3,column:60}},"3":{start:{line:4,column:24},end:{line:4,column:76}},"4":{start:{line:5,column:15},end:{line:5,column:43}},"5":{start:{line:6,column:18},end:{line:6,column:55}},"6":{start:{line:7,column:15},end:{line:7,column:67}},"7":{start:{line:22,column:2},end:{line:22,column:67}},"8":{start:{line:23,column:2},end:{line:23,column:41}},"9":{start:{line:24,column:2},end:{line:24,column:23}},"10":{start:{line:25,column:2},end:{line:25,column:27}},"11":{start:{line:26,column:2},end:{line:26,column:28}},"12":{start:{line:27,column:2},end:{line:27,column:77}},"13":{start:{line:28,column:2},end:{line:28,column:47}},"14":{start:{line:29,column:2},end:{line:29,column:42}},"15":{start:{line:30,column:2},end:{line:30,column:40}},"16":{start:{line:31,column:2},end:{line:31,column:42}},"17":{start:{line:32,column:2},end:{line:32,column:38}},"18":{start:{line:36,column:2},end:{line:38,column:3}},"19":{start:{line:37,column:3},end:{line:37,column:84}},"20":{start:{line:40,column:2},end:{line:42,column:3}},"21":{start:{line:41,column:3},end:{line:41,column:88}},"22":{start:{line:44,column:2},end:{line:46,column:3}},"23":{start:{line:45,column:3},end:{line:45,column:129}},"24":{start:{line:58,column:18},end:{line:58,column:92}},"25":{start:{line:59,column:2},end:{line:59,column:138}},"26":{start:{line:61,column:29},end:{line:61,column:53}},"27":{start:{line:62,column:2},end:{line:62,column:71}},"28":{start:{line:63,column:22},end:{line:63,column:83}},"29":{start:{line:64,column:2},end:{line:64,column:192}},"30":{start:{line:65,column:2},end:{line:65,column:28}},"31":{start:{line:69,column:2},end:{line:72,column:3}},"32":{start:{line:70,column:3},end:{line:70,column:192}},"33":{start:{line:71,column:3},end:{line:71,column:189}},"34":{start:{line:73,column:2},end:{line:73,column:28}},"35":{start:{line:89,column:18},end:{line:89,column:50}},"36":{start:{line:90,column:2},end:{line:90,column:118}},"37":{start:{line:94,column:0},end:{line:94,column:41}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:1},end:{line:21,column:2}},loc:{start:{line:21,column:58},end:{line:33,column:2}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:35,column:1},end:{line:35,column:2}},loc:{start:{line:35,column:61},end:{line:47,column:2}},line:35},"2":{name:"(anonymous_2)",decl:{start:{line:56,column:1},end:{line:56,column:2}},loc:{start:{line:56,column:64},end:{line:66,column:2}},line:56},"3":{name:"(anonymous_3)",decl:{start:{line:68,column:1},end:{line:68,column:2}},loc:{start:{line:68,column:65},end:{line:74,column:2}},line:68},"4":{name:"(anonymous_4)",decl:{start:{line:88,column:1},end:{line:88,column:2}},loc:{start:{line:88,column:97},end:{line:91,column:2}},line:88}},branchMap:{"0":{loc:{start:{line:36,column:2},end:{line:38,column:3}},type:"if",locations:[{start:{line:36,column:2},end:{line:38,column:3}},{start:{line:36,column:2},end:{line:38,column:3}}],line:36},"1":{loc:{start:{line:40,column:2},end:{line:42,column:3}},type:"if",locations:[{start:{line:40,column:2},end:{line:42,column:3}},{start:{line:40,column:2},end:{line:42,column:3}}],line:40},"2":{loc:{start:{line:44,column:2},end:{line:46,column:3}},type:"if",locations:[{start:{line:44,column:2},end:{line:46,column:3}},{start:{line:44,column:2},end:{line:46,column:3}}],line:44},"3":{loc:{start:{line:58,column:18},end:{line:58,column:92}},type:"cond-expr",locations:[{start:{line:58,column:39},end:{line:58,column:87}},{start:{line:58,column:90},end:{line:58,column:92}}],line:58},"4":{loc:{start:{line:63,column:22},end:{line:63,column:83}},type:"cond-expr",locations:[{start:{line:63,column:43},end:{line:63,column:59}},{start:{line:63,column:62},end:{line:63,column:83}}],line:63},"5":{loc:{start:{line:69,column:2},end:{line:72,column:3}},type:"if",locations:[{start:{line:69,column:2},end:{line:72,column:3}},{start:{line:69,column:2},end:{line:72,column:3}}],line:69}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"7ce4dbab7bd7db705f975edf469b26269d042809"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const ethers=(cov_25qaocwgoy.s[0]++,require('ethers'));const isAddress=(cov_25qaocwgoy.s[1]++,require('./../utils/address-utils').isAddress);const isSigner=(cov_25qaocwgoy.s[2]++,require('./../utils/signer-utils').isSigner);const isValidContract=(cov_25qaocwgoy.s[3]++,require('./../utils/contract-utils').isValidContract);const colors=(cov_25qaocwgoy.s[4]++,require('./../utils/colors'));const logsStore=(cov_25qaocwgoy.s[5]++,require('./../logs-store/logs-store'));const logger=(cov_25qaocwgoy.s[6]++,require('./../logger-service/logger-service').logger);class DeployedContractWrapper{/**
	 *
	 * Object representing deployed contract allowing user to interact with deployed contracts
	 *
	 * @param {*} contract The deployed contract descriptor
	 * @param {*} contractAddress The address of the deployed contract
	 * @param {*} signer The signer that has deployed this contract
	 * @param {*} provider ethers provider
	 */constructor(contract,contractAddress,signer,provider){cov_25qaocwgoy.f[0]++;cov_25qaocwgoy.s[7]++;this._validateInput(contract,contractAddress,signer,provider);cov_25qaocwgoy.s[8]++;this.contractAddress=contractAddress;cov_25qaocwgoy.s[9]++;this.signer=signer;cov_25qaocwgoy.s[10]++;this.provider=provider;cov_25qaocwgoy.s[11]++;this._contract=contract;cov_25qaocwgoy.s[12]++;this.contract=new ethers.Contract(contractAddress,contract.abi,signer);cov_25qaocwgoy.s[13]++;Object.assign(this,this.contract.functions);cov_25qaocwgoy.s[14]++;this.interface=this.contract.interface;cov_25qaocwgoy.s[15]++;this.estimate=this.contract.estimate;cov_25qaocwgoy.s[16]++;this.functions=this.contract.functions;cov_25qaocwgoy.s[17]++;this.filters=this.contract.filters;}_validateInput(contract,contractAddress,signer,provider){cov_25qaocwgoy.f[1]++;cov_25qaocwgoy.s[18]++;if(!isSigner(signer)){cov_25qaocwgoy.b[0][0]++;cov_25qaocwgoy.s[19]++;throw new Error('Passed signer is not a valid signer instance of ethers Wallet');}else{cov_25qaocwgoy.b[0][1]++;}cov_25qaocwgoy.s[20]++;if(!isAddress(contractAddress)){cov_25qaocwgoy.b[1][0]++;cov_25qaocwgoy.s[21]++;throw new Error(`Passed contract address (${contractAddress}) is not valid address`);}else{cov_25qaocwgoy.b[1][1]++;}cov_25qaocwgoy.s[22]++;if(!isValidContract(contract)){cov_25qaocwgoy.b[2][0]++;cov_25qaocwgoy.s[23]++;throw new Error(`Passed contract is not a valid contract object. It needs to have bytecode, abi and contractName properties`);}else{cov_25qaocwgoy.b[2][1]++;}}/**
	 *
	 * Use this method to wait for transaction and print verbose logs
	 *
	 * @param {*} transactionHash The transaction hash you are waiting for
	 * @param {*} transactionLabel [Optional] A human readable label to help you differentiate you transaction
	 */async verboseWaitForTransaction(transaction,transactionLabel){cov_25qaocwgoy.f[2]++;let labelPart=(cov_25qaocwgoy.s[24]++,transactionLabel?(cov_25qaocwgoy.b[3][0]++,`labeled ${colors.colorName(transactionLabel)} `):(cov_25qaocwgoy.b[3][1]++,''));cov_25qaocwgoy.s[25]++;logger.log(`Waiting for transaction ${labelPart}to be included in a block and mined: ${colors.colorTransactionHash(transaction.hash)}`);const transactionReceipt=(cov_25qaocwgoy.s[26]++,await transaction.wait());cov_25qaocwgoy.s[27]++;await this._postValidateTransaction(transaction,transactionReceipt);const actionLabel=(cov_25qaocwgoy.s[28]++,transactionLabel?(cov_25qaocwgoy.b[4][0]++,transactionLabel):(cov_25qaocwgoy.b[4][1]++,this.constructor.name));cov_25qaocwgoy.s[29]++;await this._logAction(this.constructor.name,actionLabel,transaction.hash,0,transaction.gasPrice.toString(),transactionReceipt.gasUsed.toString(),'Successfully Waited For Transaction');cov_25qaocwgoy.s[30]++;return transactionReceipt;}async _postValidateTransaction(transaction,transactionReceipt){cov_25qaocwgoy.f[3]++;cov_25qaocwgoy.s[31]++;if(transactionReceipt.status===0){cov_25qaocwgoy.b[5][0]++;cov_25qaocwgoy.s[32]++;await this._logAction(this.constructor.name,this._contract.contractName,transaction.hash,1,transaction.gasPrice.toString(),transactionReceipt.gasUsed.toString(),'Transaction failed');cov_25qaocwgoy.s[33]++;throw new Error(`Transaction ${colors.colorTransactionHash(transactionReceipt.transactionHash)} ${colors.colorFailure('failed')}. Please check etherscan for better reason explanation.`);}else{cov_25qaocwgoy.b[5][1]++;}cov_25qaocwgoy.s[34]++;return transactionReceipt;}/**
	 *
	 * Override this for custom logging functionality
	 *
	 * @param {*} deployerType type of deployer
	 * @param {*} nameOrLabel name of the contract or label of the transaction
	 * @param {*} transactionHash transaction hash if available
	 * @param {*} status 0 - success, 1 - failure
	 * @param {*} gasPrice the gas price param that was used by this transaction
	 * @param {*} gasUsed the gas used by this transaction
	 * @param {*} result arbitrary result text
	 */async _logAction(deployerType,nameOrLabel,transactionHash,status,gasPrice,gasUsed,result){cov_25qaocwgoy.f[4]++;const network=(cov_25qaocwgoy.s[35]++,await this.provider.getNetwork());cov_25qaocwgoy.s[36]++;logsStore.logAction(deployerType,nameOrLabel,transactionHash,status,gasPrice,gasUsed,network.chainId,result);}}cov_25qaocwgoy.s[37]++;module.exports=DeployedContractWrapper;