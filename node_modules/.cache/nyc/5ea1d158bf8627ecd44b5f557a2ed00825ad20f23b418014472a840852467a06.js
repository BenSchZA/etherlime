var cov_1yoq911upu=function(){var path="/Users/desimiramitkova/Projects/etherlime/packages/etherlime/deployer/jsonrpc-deployer/jsonrpc-private-key-deployer.js";var hash="43086b646dd4765d412a2a5b56d3b0a8d4852952";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/packages/etherlime/deployer/jsonrpc-deployer/jsonrpc-private-key-deployer.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:25},end:{line:2,column:51}},"2":{start:{line:4,column:27},end:{line:4,column:63}},"3":{start:{line:5,column:15},end:{line:5,column:70}},"4":{start:{line:6,column:32},end:{line:6,column:33}},"5":{start:{line:19,column:2},end:{line:19,column:55}},"6":{start:{line:20,column:2},end:{line:26,column:3}},"7":{start:{line:21,column:3},end:{line:21,column:72}},"8":{start:{line:22,column:3},end:{line:22,column:74}},"9":{start:{line:23,column:3},end:{line:23,column:46}},"10":{start:{line:25,column:3},end:{line:25,column:69}},"11":{start:{line:27,column:2},end:{line:27,column:57}},"12":{start:{line:28,column:2},end:{line:28,column:25}},"13":{start:{line:30,column:2},end:{line:30,column:79}},"14":{start:{line:34,column:2},end:{line:34,column:55}},"15":{start:{line:36,column:28},end:{line:36,column:73}},"16":{start:{line:37,column:2},end:{line:37,column:38}},"17":{start:{line:38,column:2},end:{line:38,column:25}},"18":{start:{line:42,column:2},end:{line:44,column:3}},"19":{start:{line:43,column:3},end:{line:43,column:72}},"20":{start:{line:48,column:22},end:{line:48,column:38}},"21":{start:{line:49,column:2},end:{line:49,column:73}},"22":{start:{line:53,column:0},end:{line:53,column:43}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:1},end:{line:17,column:2}},loc:{start:{line:17,column:52},end:{line:31,column:2}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:1},end:{line:33,column:2}},loc:{start:{line:33,column:21},end:{line:39,column:2}},line:33},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:1},end:{line:41,column:2}},loc:{start:{line:41,column:35},end:{line:45,column:2}},line:41},"3":{name:"(anonymous_3)",decl:{start:{line:47,column:1},end:{line:47,column:2}},loc:{start:{line:47,column:12},end:{line:50,column:2}},line:47}},branchMap:{"0":{loc:{start:{line:20,column:2},end:{line:26,column:3}},type:"if",locations:[{start:{line:20,column:2},end:{line:26,column:3}},{start:{line:20,column:2},end:{line:26,column:3}}],line:20},"1":{loc:{start:{line:42,column:2},end:{line:44,column:3}},type:"if",locations:[{start:{line:42,column:2},end:{line:44,column:3}},{start:{line:42,column:2},end:{line:44,column:3}}],line:42}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"43086b646dd4765d412a2a5b56d3b0a8d4852952"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const ethers=(cov_1yoq911upu.s[0]++,require('ethers'));const{isUrl,colors}=(cov_1yoq911upu.s[1]++,require('etherlime-utils'));const PrivateKeyDeployer=(cov_1yoq911upu.s[2]++,require('./../private-key-deployer'));const logger=(cov_1yoq911upu.s[3]++,require('./../../logger-service/logger-service').logger);const COVERAGE_PROVIDER_INDEX=(cov_1yoq911upu.s[4]++,1);// This is the index of the desired provider located in global.providers. We have two providers there: one for coverage which is listening for blocks and one for deploying contracts
class JSONRPCPrivateKeyDeployer extends PrivateKeyDeployer{/**
	 *
	 * Instantiates new deployer based on the JSONRPC Provider Address (for example: 'http://localhost:8545/') and private key based deployment wallet/signer instance
	 *
	 * @param {*} privateKey the private key for the deployer wallet/signer instance
	 * @param {*} nodeUrl url of the network to deploy on. This is the node url address that is given to the class
	 * @param {*} defaultOverrides [Optional] default deployment overrides
	 */constructor(privateKey,nodeUrl,defaultOverrides){cov_1yoq911upu.f[0]++;let localNodeProvider;cov_1yoq911upu.s[5]++;JSONRPCPrivateKeyDeployer._validateUrlInput(nodeUrl);cov_1yoq911upu.s[6]++;if(global.coverageSubprovider){cov_1yoq911upu.b[0][0]++;cov_1yoq911upu.s[7]++;global.provider._providers[COVERAGE_PROVIDER_INDEX].rpcUrl=nodeUrl;cov_1yoq911upu.s[8]++;localNodeProvider=new ethers.providers.Web3Provider(global.provider);cov_1yoq911upu.s[9]++;localNodeProvider.connection.url=nodeUrl;}else{cov_1yoq911upu.b[0][1]++;cov_1yoq911upu.s[10]++;localNodeProvider=new ethers.providers.JsonRpcProvider(nodeUrl);}cov_1yoq911upu.s[11]++;super(privateKey,localNodeProvider,defaultOverrides);cov_1yoq911upu.s[12]++;this.nodeUrl=nodeUrl;cov_1yoq911upu.s[13]++;logger.log(`JSONRPC Deployer Network: ${colors.colorNetwork(this.nodeUrl)}`);}setNodeUrl(nodeUrl){cov_1yoq911upu.f[1]++;cov_1yoq911upu.s[14]++;JSONRPCPrivateKeyDeployer._validateUrlInput(nodeUrl);const localNodeProvider=(cov_1yoq911upu.s[15]++,new ethers.providers.JsonRpcProvider(nodeUrl));cov_1yoq911upu.s[16]++;this.setProvider(localNodeProvider);cov_1yoq911upu.s[17]++;this.nodeUrl=nodeUrl;}static _validateUrlInput(nodeUrl){cov_1yoq911upu.f[2]++;cov_1yoq911upu.s[18]++;if(!isUrl(nodeUrl)){cov_1yoq911upu.b[1][0]++;cov_1yoq911upu.s[19]++;throw new Error(`Passed contract url (${nodeUrl}) is not valid url`);}else{cov_1yoq911upu.b[1][1]++;}}toString(){cov_1yoq911upu.f[3]++;const superString=(cov_1yoq911upu.s[20]++,super.toString());cov_1yoq911upu.s[21]++;return`Network: ${colors.colorNetwork(this.nodeUrl)}\n${superString}`;}}cov_1yoq911upu.s[22]++;module.exports=JSONRPCPrivateKeyDeployer;