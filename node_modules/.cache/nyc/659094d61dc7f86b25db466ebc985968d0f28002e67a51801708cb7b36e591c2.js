var cov_hmir06vdj=function(){var path="/Users/desimiramitkova/Projects/etherlime/deployed-contract/etherlime-ganache-wrapper.js";var hash="1da6885770aefaa7a1f4e062adac33a0537f0d63";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/deployed-contract/etherlime-ganache-wrapper.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:43}},"1":{start:{line:2,column:32},end:{line:2,column:70}},"2":{start:{line:3,column:15},end:{line:3,column:67}},"3":{start:{line:4,column:27},end:{line:4,column:62}},"4":{start:{line:5,column:17},end:{line:5,column:60}},"5":{start:{line:6,column:15},end:{line:6,column:32}},"6":{start:{line:20,column:2},end:{line:20,column:52}},"7":{start:{line:22,column:2},end:{line:22,column:31}},"8":{start:{line:23,column:2},end:{line:23,column:24}},"9":{start:{line:24,column:2},end:{line:29,column:3}},"10":{start:{line:25,column:21},end:{line:25,column:63}},"11":{start:{line:26,column:23},end:{line:26,column:84}},"12":{start:{line:27,column:3},end:{line:27,column:35}},"13":{start:{line:28,column:3},end:{line:28,column:53}},"14":{start:{line:33,column:2},end:{line:35,column:3}},"15":{start:{line:34,column:3},end:{line:34,column:49}},"16":{start:{line:37,column:2},end:{line:39,column:3}},"17":{start:{line:38,column:3},end:{line:38,column:51}},"18":{start:{line:41,column:2},end:{line:47,column:3}},"19":{start:{line:42,column:18},end:{line:42,column:67}},"20":{start:{line:43,column:3},end:{line:45,column:4}},"21":{start:{line:44,column:4},end:{line:44,column:97}},"22":{start:{line:46,column:3},end:{line:46,column:59}},"23":{start:{line:49,column:2},end:{line:55,column:3}},"24":{start:{line:50,column:18},end:{line:50,column:74}},"25":{start:{line:51,column:3},end:{line:53,column:4}},"26":{start:{line:52,column:4},end:{line:52,column:104}},"27":{start:{line:54,column:3},end:{line:54,column:66}},"28":{start:{line:57,column:2},end:{line:57,column:97}},"29":{start:{line:62,column:18},end:{line:62,column:92}},"30":{start:{line:63,column:2},end:{line:63,column:138}},"31":{start:{line:65,column:2},end:{line:65,column:39}},"32":{start:{line:66,column:29},end:{line:66,column:53}},"33":{start:{line:67,column:2},end:{line:67,column:71}},"34":{start:{line:68,column:22},end:{line:68,column:83}},"35":{start:{line:69,column:2},end:{line:69,column:192}},"36":{start:{line:70,column:2},end:{line:70,column:28}},"37":{start:{line:75,column:0},end:{line:75,column:41}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:1},end:{line:19,column:2}},loc:{start:{line:19,column:58},end:{line:30,column:2}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:32,column:1},end:{line:32,column:2}},loc:{start:{line:32,column:30},end:{line:58,column:2}},line:32},"2":{name:"(anonymous_2)",decl:{start:{line:60,column:1},end:{line:60,column:2}},loc:{start:{line:60,column:64},end:{line:71,column:2}},line:60}},branchMap:{"0":{loc:{start:{line:33,column:2},end:{line:35,column:3}},type:"if",locations:[{start:{line:33,column:2},end:{line:35,column:3}},{start:{line:33,column:2},end:{line:35,column:3}}],line:33},"1":{loc:{start:{line:37,column:2},end:{line:39,column:3}},type:"if",locations:[{start:{line:37,column:2},end:{line:39,column:3}},{start:{line:37,column:2},end:{line:39,column:3}}],line:37},"2":{loc:{start:{line:37,column:6},end:{line:37,column:92}},type:"binary-expr",locations:[{start:{line:37,column:6},end:{line:37,column:48}},{start:{line:37,column:52},end:{line:37,column:92}}],line:37},"3":{loc:{start:{line:41,column:2},end:{line:47,column:3}},type:"if",locations:[{start:{line:41,column:2},end:{line:47,column:3}},{start:{line:41,column:2},end:{line:47,column:3}}],line:41},"4":{loc:{start:{line:43,column:3},end:{line:45,column:4}},type:"if",locations:[{start:{line:43,column:3},end:{line:45,column:4}},{start:{line:43,column:3},end:{line:45,column:4}}],line:43},"5":{loc:{start:{line:49,column:2},end:{line:55,column:3}},type:"if",locations:[{start:{line:49,column:2},end:{line:55,column:3}},{start:{line:49,column:2},end:{line:55,column:3}}],line:49},"6":{loc:{start:{line:51,column:3},end:{line:53,column:4}},type:"if",locations:[{start:{line:51,column:3},end:{line:53,column:4}},{start:{line:51,column:3},end:{line:53,column:4}}],line:51},"7":{loc:{start:{line:62,column:18},end:{line:62,column:92}},type:"cond-expr",locations:[{start:{line:62,column:39},end:{line:62,column:87}},{start:{line:62,column:90},end:{line:62,column:92}}],line:62},"8":{loc:{start:{line:68,column:22},end:{line:68,column:83}},type:"cond-expr",locations:[{start:{line:68,column:43},end:{line:68,column:59}},{start:{line:68,column:62},end:{line:68,column:83}}],line:68}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"1da6885770aefaa7a1f4e062adac33a0537f0d63"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const colors=(cov_hmir06vdj.s[0]++,require('./../utils/colors'));const DeployedContractWrapper=(cov_hmir06vdj.s[1]++,require('./deployed-contract-wrapper'));const logger=(cov_hmir06vdj.s[2]++,require('./../logger-service/logger-service').logger);const ganacheSetupConfig=(cov_hmir06vdj.s[3]++,require('./../deployer/setup.json'));const isSigner=(cov_hmir06vdj.s[4]++,require('./../utils/signer-utils').isSigner);const ethers=(cov_hmir06vdj.s[5]++,require('ethers'));class EtherlimeGanacheWrapper extends DeployedContractWrapper{/**
	 *
	 * Object representing deployed contract allowing user to interact with deployed contracts
	 *
	 * @param {*} contract The deployed contract descriptor
	 * @param {*} contractAddress The address of the deployed contract
	 * @param {*} signer The signer that has deployed this contract
	 * @param {*} provider ethers provider
	 */constructor(contract,contractAddress,signer,provider){cov_hmir06vdj.f[0]++;cov_hmir06vdj.s[6]++;super(contract,contractAddress,signer,provider);cov_hmir06vdj.s[7]++;this.instances=new Array();cov_hmir06vdj.s[8]++;this.instancesMap={};cov_hmir06vdj.s[9]++;for(const acc of ganacheSetupConfig.accounts){const accSigner=(cov_hmir06vdj.s[10]++,new ethers.Wallet(acc.secretKey,provider));const accContract=(cov_hmir06vdj.s[11]++,new ethers.Contract(contractAddress,contract.abi,accSigner));cov_hmir06vdj.s[12]++;this.instances.push(accContract);cov_hmir06vdj.s[13]++;this.instancesMap[accSigner.address]=accContract;}}from(addressOrSignerOrIndex){cov_hmir06vdj.f[1]++;cov_hmir06vdj.s[14]++;if(Number.isInteger(addressOrSignerOrIndex)){cov_hmir06vdj.b[0][0]++;cov_hmir06vdj.s[15]++;return this.instances[addressOrSignerOrIndex];}else{cov_hmir06vdj.b[0][1]++;}cov_hmir06vdj.s[16]++;if((cov_hmir06vdj.b[2][0]++,typeof addressOrSignerOrIndex==='string')||(cov_hmir06vdj.b[2][1]++,addressOrSignerOrIndex instanceof String)){cov_hmir06vdj.b[1][0]++;cov_hmir06vdj.s[17]++;return this.instancesMap[addressOrSignerOrIndex];}else{cov_hmir06vdj.b[1][1]++;}cov_hmir06vdj.s[18]++;if(isSigner(addressOrSignerOrIndex)){cov_hmir06vdj.b[3][0]++;let instance=(cov_hmir06vdj.s[19]++,this.instancesMap[addressOrSignerOrIndex.address]);cov_hmir06vdj.s[20]++;if(!instance){cov_hmir06vdj.b[4][0]++;cov_hmir06vdj.s[21]++;return new ethers.Contract(this.contractAddress,this._contract.abi,addressOrSignerOrIndex);}else{cov_hmir06vdj.b[4][1]++;}cov_hmir06vdj.s[22]++;return this.instancesMap[addressOrSignerOrIndex.address];}else{cov_hmir06vdj.b[3][1]++;}cov_hmir06vdj.s[23]++;if(isSigner(addressOrSignerOrIndex.signer)){cov_hmir06vdj.b[5][0]++;let instance=(cov_hmir06vdj.s[24]++,this.instancesMap[addressOrSignerOrIndex.signer.address]);cov_hmir06vdj.s[25]++;if(!instance){cov_hmir06vdj.b[6][0]++;cov_hmir06vdj.s[26]++;return new ethers.Contract(this.contractAddress,this._contract.abi,addressOrSignerOrIndex.signer);}else{cov_hmir06vdj.b[6][1]++;}cov_hmir06vdj.s[27]++;return this.instancesMap[addressOrSignerOrIndex.signer.address];}else{cov_hmir06vdj.b[5][1]++;}cov_hmir06vdj.s[28]++;throw new Error('Unrecognized input parameter. It should be index, address or signer instance');}async verboseWaitForTransaction(transaction,transactionLabel){cov_hmir06vdj.f[2]++;let labelPart=(cov_hmir06vdj.s[29]++,transactionLabel?(cov_hmir06vdj.b[7][0]++,`labeled ${colors.colorName(transactionLabel)} `):(cov_hmir06vdj.b[7][1]++,''));cov_hmir06vdj.s[30]++;logger.log(`Waiting for transaction ${labelPart}to be included in a block and mined: ${colors.colorTransactionHash(transaction.hash)}`);cov_hmir06vdj.s[31]++;await this.provider.send('evm_mine');const transactionReceipt=(cov_hmir06vdj.s[32]++,await transaction.wait());cov_hmir06vdj.s[33]++;await this._postValidateTransaction(transaction,transactionReceipt);const actionLabel=(cov_hmir06vdj.s[34]++,transactionLabel?(cov_hmir06vdj.b[8][0]++,transactionLabel):(cov_hmir06vdj.b[8][1]++,this.constructor.name));cov_hmir06vdj.s[35]++;await this._logAction(this.constructor.name,actionLabel,transaction.hash,0,transaction.gasPrice.toString(),transactionReceipt.gasUsed.toString(),'Successfully Waited For Transaction');cov_hmir06vdj.s[36]++;return transactionReceipt;}}cov_hmir06vdj.s[37]++;module.exports=EtherlimeGanacheWrapper;