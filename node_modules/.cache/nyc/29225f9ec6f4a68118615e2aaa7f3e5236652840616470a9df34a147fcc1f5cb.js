var cov_1lqupla5ye=function(){var path="/Users/desimiramitkova/Projects/etherlime/packages/etherlime/cli-commands/etherlime-ide/etherlime-ide.js";var hash="514a03eb57f359ca9f8a05897ede325f1a88e65e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/packages/etherlime/cli-commands/etherlime-ide/etherlime-ide.js",statementMap:{"0":{start:{line:1,column:11},end:{line:1,column:30}},"1":{start:{line:2,column:13},end:{line:2,column:28}},"2":{start:{line:3,column:12},end:{line:3,column:43}},"3":{start:{line:4,column:13},end:{line:4,column:28}},"4":{start:{line:5,column:13},end:{line:5,column:58}},"5":{start:{line:6,column:14},end:{line:6,column:44}},"6":{start:{line:8,column:19},end:{line:8,column:86}},"7":{start:{line:9,column:18},end:{line:9,column:32}},"8":{start:{line:10,column:21},end:{line:10,column:60}},"9":{start:{line:12,column:24},end:{line:12,column:37}},"10":{start:{line:14,column:12},end:{line:18,column:1}},"11":{start:{line:15,column:27},end:{line:15,column:39}},"12":{start:{line:16,column:4},end:{line:16,column:41}},"13":{start:{line:17,column:4},end:{line:17,column:40}},"14":{start:{line:21,column:19},end:{line:24,column:1}},"15":{start:{line:22,column:21},end:{line:22,column:42}},"16":{start:{line:23,column:4},end:{line:23,column:39}},"17":{start:{line:27,column:21},end:{line:46,column:1}},"18":{start:{line:29,column:4},end:{line:40,column:5}},"19":{start:{line:30,column:8},end:{line:30,column:49}},"20":{start:{line:31,column:8},end:{line:35,column:9}},"21":{start:{line:32,column:12},end:{line:32,column:72}},"22":{start:{line:33,column:12},end:{line:33,column:46}},"23":{start:{line:37,column:8},end:{line:37,column:50}},"24":{start:{line:38,column:8},end:{line:38,column:33}},"25":{start:{line:39,column:8},end:{line:39,column:14}},"26":{start:{line:42,column:4},end:{line:42,column:49}},"27":{start:{line:43,column:4},end:{line:43,column:69}},"28":{start:{line:44,column:4},end:{line:44,column:65}},"29":{start:{line:45,column:4},end:{line:45,column:30}},"30":{start:{line:48,column:26},end:{line:51,column:1}},"31":{start:{line:49,column:4},end:{line:49,column:55}},"32":{start:{line:50,column:4},end:{line:50,column:29}},"33":{start:{line:53,column:15},end:{line:72,column:1}},"34":{start:{line:54,column:4},end:{line:54,column:45}},"35":{start:{line:55,column:4},end:{line:57,column:5}},"36":{start:{line:56,column:8},end:{line:56,column:56}},"37":{start:{line:58,column:4},end:{line:58,column:37}},"38":{start:{line:59,column:4},end:{line:59,column:47}},"39":{start:{line:60,column:23},end:{line:60,column:65}},"40":{start:{line:61,column:21},end:{line:61,column:117}},"41":{start:{line:64,column:4},end:{line:66,column:7}},"42":{start:{line:65,column:8},end:{line:65,column:43}},"43":{start:{line:68,column:4},end:{line:70,column:7}},"44":{start:{line:69,column:8},end:{line:69,column:39}},"45":{start:{line:74,column:32},end:{line:76,column:1}},"46":{start:{line:75,column:4},end:{line:75,column:28}},"47":{start:{line:79,column:0},end:{line:79,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:12},end:{line:14,column:13}},loc:{start:{line:14,column:28},end:{line:18,column:1}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:19},end:{line:21,column:20}},loc:{start:{line:21,column:25},end:{line:24,column:1}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:21},end:{line:27,column:22}},loc:{start:{line:27,column:40},end:{line:46,column:1}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:48,column:26},end:{line:48,column:27}},loc:{start:{line:48,column:38},end:{line:51,column:1}},line:48},"4":{name:"(anonymous_4)",decl:{start:{line:53,column:15},end:{line:53,column:16}},loc:{start:{line:53,column:40},end:{line:72,column:1}},line:53},"5":{name:"(anonymous_5)",decl:{start:{line:64,column:33},end:{line:64,column:34}},loc:{start:{line:64,column:43},end:{line:66,column:5}},line:64},"6":{name:"(anonymous_6)",decl:{start:{line:68,column:33},end:{line:68,column:34}},loc:{start:{line:68,column:43},end:{line:70,column:5}},line:68},"7":{name:"(anonymous_7)",decl:{start:{line:74,column:32},end:{line:74,column:33}},loc:{start:{line:74,column:41},end:{line:76,column:1}},line:74}},branchMap:{"0":{loc:{start:{line:29,column:4},end:{line:40,column:5}},type:"if",locations:[{start:{line:29,column:4},end:{line:40,column:5}},{start:{line:29,column:4},end:{line:40,column:5}}],line:29},"1":{loc:{start:{line:55,column:4},end:{line:57,column:5}},type:"if",locations:[{start:{line:55,column:4},end:{line:57,column:5}},{start:{line:55,column:4},end:{line:57,column:5}}],line:55}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"514a03eb57f359ca9f8a05897ede325f1a88e65e"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const fs=(cov_1lqupla5ye.s[0]++,require('fs-extra'));const path=(cov_1lqupla5ye.s[1]++,require('path'));const git=(cov_1lqupla5ye.s[2]++,require('simple-git/promise')());const util=(cov_1lqupla5ye.s[3]++,require('util'));const exec=(cov_1lqupla5ye.s[4]++,util.promisify(require('child_process').exec));const spawn=(cov_1lqupla5ye.s[5]++,require('child_process').spawn);const ideRepoUrl=(cov_1lqupla5ye.s[6]++,`https://github.com${path.sep}LimeChain${path.sep}Solidity-IDE.git`);const ideFolder=(cov_1lqupla5ye.s[7]++,'Solidity-IDE');const ideServerRun=(cov_1lqupla5ye.s[8]++,`Solidity-IDE${path.sep}solc-server.js`);let projectWorkingDir=(cov_1lqupla5ye.s[9]++,process.cwd());//save current working dir of the project
cov_1lqupla5ye.s[10]++;const run=async port=>{cov_1lqupla5ye.f[0]++;let etherlimeRootDir=(cov_1lqupla5ye.s[11]++,getRootDir());cov_1lqupla5ye.s[12]++;await fetchIdeRepo(etherlimeRootDir);cov_1lqupla5ye.s[13]++;await runIde(etherlimeRootDir,port);};// find etherlime root dir
cov_1lqupla5ye.s[14]++;const getRootDir=()=>{cov_1lqupla5ye.f[1]++;let currentDir=(cov_1lqupla5ye.s[15]++,path.parse(__dirname));cov_1lqupla5ye.s[16]++;return path.dirname(currentDir.dir);};//clone IDE repo or pull new updates if it was already initialized
cov_1lqupla5ye.s[17]++;const fetchIdeRepo=async rootDir=>{cov_1lqupla5ye.f[2]++;cov_1lqupla5ye.s[18]++;if(fs.existsSync(`${rootDir}${path.sep}${ideFolder}`)){cov_1lqupla5ye.b[0][0]++;cov_1lqupla5ye.s[19]++;console.log("====== Updating IDE ======");cov_1lqupla5ye.s[20]++;try{cov_1lqupla5ye.s[21]++;changeCurrentWorkingDir(`${rootDir}${path.sep}${ideFolder}`);//change working dir in order to pull the repo
cov_1lqupla5ye.s[22]++;await git.pull('origin','master');}catch(e){}cov_1lqupla5ye.s[23]++;fs.removeSync(`.${path.sep}node_modules`);cov_1lqupla5ye.s[24]++;await installIdeModules();cov_1lqupla5ye.s[25]++;return;}else{cov_1lqupla5ye.b[0][1]++;}cov_1lqupla5ye.s[26]++;console.log('====== Initializing IDE ======');cov_1lqupla5ye.s[27]++;await git.clone(ideRepoUrl,`${rootDir}${path.sep}${ideFolder}`);cov_1lqupla5ye.s[28]++;changeCurrentWorkingDir(`${rootDir}${path.sep}${ideFolder}`);//change working dir to install the packages
cov_1lqupla5ye.s[29]++;await installIdeModules();};cov_1lqupla5ye.s[30]++;const installIdeModules=async()=>{cov_1lqupla5ye.f[3]++;cov_1lqupla5ye.s[31]++;console.log('====== Installing IDE modules ======');cov_1lqupla5ye.s[32]++;await exec(`npm install`);};cov_1lqupla5ye.s[33]++;const runIde=async(rootDir,port)=>{cov_1lqupla5ye.f[4]++;cov_1lqupla5ye.s[34]++;console.log("====== Running IDE ======");cov_1lqupla5ye.s[35]++;if(port){cov_1lqupla5ye.b[1][0]++;cov_1lqupla5ye.s[36]++;fs.writeFileSync('.env',`VUE_APP_PORT=${port}`);}else{cov_1lqupla5ye.b[1][1]++;}cov_1lqupla5ye.s[37]++;await exec('npm run build-local');cov_1lqupla5ye.s[38]++;changeCurrentWorkingDir(projectWorkingDir);//return to project's working dir
let pathToFolder=(cov_1lqupla5ye.s[39]++,`${projectWorkingDir}${path.sep}contracts`);// path to folder with .sol contracts that will be opened in IDE
let ideProcess=(cov_1lqupla5ye.s[40]++,spawn('node',[`${rootDir}${path.sep}${ideServerRun}`,`--path=${pathToFolder}`,'--noganache']));//run IDE
// log the data form the running process
cov_1lqupla5ye.s[41]++;ideProcess.stdout.on('data',data=>{cov_1lqupla5ye.f[5]++;cov_1lqupla5ye.s[42]++;console.log(data.toString('utf-8'));});cov_1lqupla5ye.s[43]++;ideProcess.stderr.on('data',data=>{cov_1lqupla5ye.f[6]++;cov_1lqupla5ye.s[44]++;console.log(`stderr: ${data}`);});};cov_1lqupla5ye.s[45]++;const changeCurrentWorkingDir=dir=>{cov_1lqupla5ye.f[7]++;cov_1lqupla5ye.s[46]++;process.chdir(`${dir}`);};cov_1lqupla5ye.s[47]++;module.exports={run};