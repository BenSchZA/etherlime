var cov_eeqxklhho=function(){var path="/Users/desimiramitkova/Projects/etherlime/deployer/private-key-deployer.js";var hash="eacb31018fccbf4b3be13bb6c9f7c5ccf9423caa";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/deployer/private-key-deployer.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:15},end:{line:2,column:43}},"2":{start:{line:4,column:17},end:{line:4,column:38}},"3":{start:{line:5,column:15},end:{line:5,column:67}},"4":{start:{line:16,column:30},end:{line:16,column:92}},"5":{start:{line:17,column:17},end:{line:17,column:65}},"6":{start:{line:19,column:2},end:{line:19,column:44}},"7":{start:{line:21,column:2},end:{line:21,column:99}},"8":{start:{line:25,column:30},end:{line:25,column:92}},"9":{start:{line:26,column:17},end:{line:26,column:70}},"10":{start:{line:27,column:2},end:{line:27,column:25}},"11":{start:{line:31,column:2},end:{line:31,column:92}},"12":{start:{line:35,column:0},end:{line:35,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:1},end:{line:15,column:2}},loc:{start:{line:15,column:53},end:{line:22,column:2}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:1},end:{line:24,column:2}},loc:{start:{line:24,column:27},end:{line:28,column:2}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:30,column:1},end:{line:30,column:2}},loc:{start:{line:30,column:12},end:{line:32,column:2}},line:30}},branchMap:{"0":{loc:{start:{line:16,column:30},end:{line:16,column:92}},type:"cond-expr",locations:[{start:{line:16,column:62},end:{line:16,column:72}},{start:{line:16,column:75},end:{line:16,column:92}}],line:16},"1":{loc:{start:{line:25,column:30},end:{line:25,column:92}},type:"cond-expr",locations:[{start:{line:25,column:62},end:{line:25,column:72}},{start:{line:25,column:75},end:{line:25,column:92}}],line:25}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"eacb31018fccbf4b3be13bb6c9f7c5ccf9423caa"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const ethers=(cov_eeqxklhho.s[0]++,require('ethers'));const colors=(cov_eeqxklhho.s[1]++,require('./../utils/colors'));const Deployer=(cov_eeqxklhho.s[2]++,require('./deployer'));const logger=(cov_eeqxklhho.s[3]++,require('./../logger-service/logger-service').logger);class PrivateKeyDeployer extends Deployer{/**
	 * Instantiates new deployer with deployer wallet/signer instance based on privateKey. You probably should not use this class directly but use something inheriting this as it gives you provider options too
	 * @param {*} privateKey the private key for the deployer wallet/signer instance
	 * @param {*} provider the ethers.provider instance
	 * @param {*} defaultOverrides [Optional] default deployment overrides
	 */constructor(privateKey,provider,defaultOverrides){cov_eeqxklhho.f[0]++;const sanitizedPrivateKey=(cov_eeqxklhho.s[4]++,privateKey.startsWith('0x')?(cov_eeqxklhho.b[0][0]++,privateKey):(cov_eeqxklhho.b[0][1]++,`0x${privateKey}`));const signer=(cov_eeqxklhho.s[5]++,new ethers.Wallet(sanitizedPrivateKey,provider));cov_eeqxklhho.s[6]++;super(signer,provider,defaultOverrides);cov_eeqxklhho.s[7]++;logger.log(`Deployer set to deploy from address: ${colors.colorAddress(this.signer.address)}\n`);}setPrivateKey(privateKey){cov_eeqxklhho.f[1]++;const sanitizedPrivateKey=(cov_eeqxklhho.s[8]++,privateKey.startsWith('0x')?(cov_eeqxklhho.b[1][0]++,privateKey):(cov_eeqxklhho.b[1][1]++,`0x${privateKey}`));const signer=(cov_eeqxklhho.s[9]++,new ethers.Wallet(sanitizedPrivateKey,this.provider));cov_eeqxklhho.s[10]++;this.setSigner(signer);}toString(){cov_eeqxklhho.f[2]++;cov_eeqxklhho.s[11]++;return`Deployer set to deploy from address: ${colors.colorAddress(this.signer.address)}`;}}cov_eeqxklhho.s[12]++;module.exports=PrivateKeyDeployer;