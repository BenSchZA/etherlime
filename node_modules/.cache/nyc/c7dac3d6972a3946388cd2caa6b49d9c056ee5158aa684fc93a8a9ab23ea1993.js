var cov_2cytid1jtm=function(){var path="/Users/desimiramitkova/Projects/etherlime/deployer/infura-deployer/infura-private-key-deployer.js";var hash="7fcb0a657e28f2c1b5b834cc8b222ce6c7c2c250";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/deployer/infura-deployer/infura-private-key-deployer.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:3,column:27},end:{line:3,column:63}},"2":{start:{line:4,column:15},end:{line:4,column:46}},"3":{start:{line:5,column:15},end:{line:5,column:70}},"4":{start:{line:19,column:24},end:{line:19,column:56}},"5":{start:{line:20,column:25},end:{line:20,column:83}},"6":{start:{line:21,column:2},end:{line:21,column:54}},"7":{start:{line:23,column:2},end:{line:23,column:127}},"8":{start:{line:25,column:2},end:{line:25,column:25}},"9":{start:{line:26,column:2},end:{line:26,column:23}},"10":{start:{line:30,column:24},end:{line:30,column:56}},"11":{start:{line:31,column:25},end:{line:31,column:88}},"12":{start:{line:32,column:2},end:{line:32,column:35}},"13":{start:{line:33,column:2},end:{line:33,column:25}},"14":{start:{line:37,column:25},end:{line:37,column:88}},"15":{start:{line:38,column:2},end:{line:38,column:35}},"16":{start:{line:39,column:2},end:{line:39,column:23}},"17":{start:{line:43,column:22},end:{line:43,column:38}},"18":{start:{line:44,column:2},end:{line:44,column:146}},"19":{start:{line:48,column:0},end:{line:48,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:1},end:{line:18,column:2}},loc:{start:{line:18,column:60},end:{line:27,column:2}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:1},end:{line:29,column:2}},loc:{start:{line:29,column:21},end:{line:34,column:2}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:1},end:{line:36,column:2}},loc:{start:{line:36,column:19},end:{line:40,column:2}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:42,column:1},end:{line:42,column:2}},loc:{start:{line:42,column:12},end:{line:45,column:2}},line:42}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"7fcb0a657e28f2c1b5b834cc8b222ce6c7c2c250"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const ethers=(cov_2cytid1jtm.s[0]++,require('ethers'));const PrivateKeyDeployer=(cov_2cytid1jtm.s[1]++,require('./../private-key-deployer'));const colors=(cov_2cytid1jtm.s[2]++,require('./../../utils/colors'));const logger=(cov_2cytid1jtm.s[3]++,require('./../../logger-service/logger-service').logger);class InfuraPrivateKeyDeployer extends PrivateKeyDeployer{/**
	 *
	 * Instantiates new deployer based on the Infura service and private key based deployment wallet/signer instance
	 *
	 * @param {*} privateKey the private key for the deployer wallet/signer instance
	 * @param {*} network network to deploy on. Check ethers for all networks. Examples: mainnet, rinkeby, ropsten
	 * @param {*} apiKey the apiKey given to you by Infura
	 * @param {*} defaultOverrides [Optional] default deployment overrides
	 */constructor(privateKey,network,apiKey,defaultOverrides){cov_2cytid1jtm.f[0]++;const infuraNetwork=(cov_2cytid1jtm.s[4]++,ethers.utils.getNetwork(network));const infuraProvider=(cov_2cytid1jtm.s[5]++,new ethers.providers.InfuraProvider(infuraNetwork,apiKey));cov_2cytid1jtm.s[6]++;super(privateKey,infuraProvider,defaultOverrides);cov_2cytid1jtm.s[7]++;logger.log(`Deployer set to Infura. Network: ${colors.colorNetwork(network)} with API Key: ${colors.colorAPIKey(apiKey)}\n`);cov_2cytid1jtm.s[8]++;this.network=network;cov_2cytid1jtm.s[9]++;this.apiKey=apiKey;}setNetwork(network){cov_2cytid1jtm.f[1]++;const infuraNetwork=(cov_2cytid1jtm.s[10]++,ethers.utils.getNetwork(network));const infuraProvider=(cov_2cytid1jtm.s[11]++,new ethers.providers.InfuraProvider(infuraNetwork,this.apiKey));cov_2cytid1jtm.s[12]++;this.setProvider(infuraProvider);cov_2cytid1jtm.s[13]++;this.network=network;}setApiKey(apiKey){cov_2cytid1jtm.f[2]++;const infuraProvider=(cov_2cytid1jtm.s[14]++,new ethers.providers.InfuraProvider(this.infuraNetwork,apiKey));cov_2cytid1jtm.s[15]++;this.setProvider(infuraProvider);cov_2cytid1jtm.s[16]++;this.apiKey=apiKey;}toString(){cov_2cytid1jtm.f[3]++;const superString=(cov_2cytid1jtm.s[17]++,super.toString());cov_2cytid1jtm.s[18]++;return`Deployer set to Infura. Network: ${colors.colorNetwork(this.network)} with API Key: ${colors.colorAPIKey(this.apiKey)}\n${superString}`;}}cov_2cytid1jtm.s[19]++;module.exports=InfuraPrivateKeyDeployer;