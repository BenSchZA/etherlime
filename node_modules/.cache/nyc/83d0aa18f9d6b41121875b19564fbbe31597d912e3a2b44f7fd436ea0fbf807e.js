var cov_o0h6fkz35=function(){var path="/Users/desimiramitkova/Projects/etherlime/packages/etherlime/deployer/etherlime-ganache-deployer/etherlime-ganache-deployer.js";var hash="b7c89ab5b1b38af10855ec1e85a8c28d3b80e1cd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/packages/etherlime/deployer/etherlime-ganache-deployer/etherlime-ganache-deployer.js",statementMap:{"0":{start:{line:1,column:27},end:{line:1,column:53}},"1":{start:{line:2,column:24},end:{line:2,column:85}},"2":{start:{line:3,column:27},end:{line:3,column:53}},"3":{start:{line:4,column:32},end:{line:4,column:94}},"4":{start:{line:5,column:15},end:{line:5,column:70}},"5":{start:{line:17,column:2},end:{line:17,column:52}},"6":{start:{line:19,column:18},end:{line:19,column:45}},"7":{start:{line:21,column:2},end:{line:21,column:47}},"8":{start:{line:22,column:2},end:{line:22,column:25}},"9":{start:{line:26,column:2},end:{line:26,column:52}},"10":{start:{line:27,column:18},end:{line:27,column:45}},"11":{start:{line:28,column:2},end:{line:28,column:27}},"12":{start:{line:32,column:2},end:{line:34,column:3}},"13":{start:{line:33,column:3},end:{line:33,column:62}},"14":{start:{line:38,column:22},end:{line:38,column:38}},"15":{start:{line:39,column:2},end:{line:39,column:73}},"16":{start:{line:43,column:2},end:{line:43,column:39}},"17":{start:{line:44,column:2},end:{line:44,column:63}},"18":{start:{line:48,column:2},end:{line:48,column:148}},"19":{start:{line:49,column:2},end:{line:49,column:111}},"20":{start:{line:53,column:2},end:{line:53,column:129}},"21":{start:{line:54,column:2},end:{line:54,column:92}},"22":{start:{line:58,column:0},end:{line:58,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:16,column:125},end:{line:23,column:2}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:25,column:1},end:{line:25,column:2}},loc:{start:{line:25,column:15},end:{line:29,column:2}},line:25},"2":{name:"(anonymous_2)",decl:{start:{line:31,column:1},end:{line:31,column:2}},loc:{start:{line:31,column:33},end:{line:35,column:2}},line:31},"3":{name:"(anonymous_3)",decl:{start:{line:37,column:1},end:{line:37,column:2}},loc:{start:{line:37,column:12},end:{line:40,column:2}},line:37},"4":{name:"(anonymous_4)",decl:{start:{line:42,column:1},end:{line:42,column:2}},loc:{start:{line:42,column:46},end:{line:45,column:2}},line:42},"5":{name:"(anonymous_5)",decl:{start:{line:47,column:1},end:{line:47,column:2}},loc:{start:{line:47,column:76},end:{line:50,column:2}},line:47},"6":{name:"(anonymous_6)",decl:{start:{line:52,column:1},end:{line:52,column:2}},loc:{start:{line:52,column:49},end:{line:55,column:2}},line:52}},branchMap:{"0":{loc:{start:{line:16,column:13},end:{line:16,column:66}},type:"default-arg",locations:[{start:{line:16,column:26},end:{line:16,column:66}}],line:16},"1":{loc:{start:{line:16,column:68},end:{line:16,column:105}},type:"default-arg",locations:[{start:{line:16,column:75},end:{line:16,column:105}}],line:16},"2":{loc:{start:{line:32,column:2},end:{line:34,column:3}},type:"if",locations:[{start:{line:32,column:2},end:{line:34,column:3}},{start:{line:32,column:2},end:{line:34,column:3}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0],"1":[0],"2":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"b7c89ab5b1b38af10855ec1e85a8c28d3b80e1cd"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{colors,isNumber}=(cov_o0h6fkz35.s[0]++,require('etherlime-utils'));const JSONRPCDeployer=(cov_o0h6fkz35.s[1]++,require('./../jsonrpc-deployer/jsonrpc-private-key-deployer'));const ganacheSetupConfig=(cov_o0h6fkz35.s[2]++,require('./../setup.json'));const EtherlimeGanacheWrapper=(cov_o0h6fkz35.s[3]++,require('./../../deployed-contract/etherlime-ganache-wrapper'));const logger=(cov_o0h6fkz35.s[4]++,require('./../../logger-service/logger-service').logger);class EtherlimeGanacheDeployer extends JSONRPCDeployer{/**
	 *
	 * Instantiates new deployer based on the GanacheCli Provider; If no privateKey and nodeUrl are specified, the deployer will be instantiated with the default values from cli-commands/ganache/setup.json
	 *
	 * @param {*} privateKey the private key for the deployer wallet/signer instance
	 * @param {*} port port number of the network to deploy on. This is the port number that is given to the class
	 * @param {*} defaultOverrides [Optional] default deployment overrides
	 */constructor(privateKey=(cov_o0h6fkz35.b[0][0]++,ganacheSetupConfig.accounts[0].secretKey),port=(cov_o0h6fkz35.b[1][0]++,ganacheSetupConfig.defaultPort),defaultOverrides){cov_o0h6fkz35.f[0]++;cov_o0h6fkz35.s[5]++;EtherlimeGanacheDeployer._validatePortInput(port);const nodeUrl=(cov_o0h6fkz35.s[6]++,`http://localhost:${port}/`);cov_o0h6fkz35.s[7]++;super(privateKey,nodeUrl,defaultOverrides);cov_o0h6fkz35.s[8]++;this.nodeUrl=nodeUrl;}setPort(port){cov_o0h6fkz35.f[1]++;cov_o0h6fkz35.s[9]++;EtherlimeGanacheDeployer._validatePortInput(port);const nodeUrl=(cov_o0h6fkz35.s[10]++,`http://localhost:${port}/`);cov_o0h6fkz35.s[11]++;this.setNodeUrl(nodeUrl);}static _validatePortInput(port){cov_o0h6fkz35.f[2]++;cov_o0h6fkz35.s[12]++;if(!isNumber(port)){cov_o0h6fkz35.b[2][0]++;cov_o0h6fkz35.s[13]++;throw new Error(`Passed port (${port}) is not valid port`);}else{cov_o0h6fkz35.b[2][1]++;}}toString(){cov_o0h6fkz35.f[3]++;const superString=(cov_o0h6fkz35.s[14]++,super.toString());cov_o0h6fkz35.s[15]++;return`Network: ${colors.colorNetwork(this.nodeUrl)}\n${superString}`;}async _waitForDeployTransaction(transaction){cov_o0h6fkz35.f[4]++;cov_o0h6fkz35.s[16]++;await this.provider.send('evm_mine');cov_o0h6fkz35.s[17]++;return this.provider.getTransactionReceipt(transaction.hash);}async _generateDeploymentResult(contract,transaction,transactionReceipt){cov_o0h6fkz35.f[5]++;cov_o0h6fkz35.s[18]++;logger.log(`Contract ${colors.colorName(contract.contractName)} deployed at address: ${colors.colorAddress(transactionReceipt.contractAddress)}`);cov_o0h6fkz35.s[19]++;return new EtherlimeGanacheWrapper(contract,transactionReceipt.contractAddress,this.signer,this.provider);}wrapDeployedContract(contract,contractAddress){cov_o0h6fkz35.f[6]++;cov_o0h6fkz35.s[20]++;logger.log(`Wrapping contract ${colors.colorName(contract.contractName)} at address: ${colors.colorAddress(contractAddress)}`);cov_o0h6fkz35.s[21]++;return new EtherlimeGanacheWrapper(contract,contractAddress,this.signer,this.provider);}}cov_o0h6fkz35.s[22]++;module.exports=EtherlimeGanacheDeployer;