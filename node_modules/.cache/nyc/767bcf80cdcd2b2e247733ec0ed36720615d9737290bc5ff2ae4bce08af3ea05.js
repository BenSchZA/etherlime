var cov_qoec83yrr=function(){var path="/Users/desimiramitkova/Projects/etherlime/packages/etherlime/cli-commands/etherlime-test/assertions.js";var hash="105f648527343eeac91e720d6726a2dde624eda6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/packages/etherlime/cli-commands/etherlime-test/assertions.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:30}},"1":{start:{line:3,column:0},end:{line:29,column:2}},"2":{start:{line:4,column:15},end:{line:4,column:26}},"3":{start:{line:5,column:2},end:{line:10,column:5}},"4":{start:{line:6,column:4},end:{line:6,column:159}},"5":{start:{line:8,column:17},end:{line:8,column:53}},"6":{start:{line:9,column:4},end:{line:9,column:116}},"7":{start:{line:11,column:2},end:{line:13,column:4}},"8":{start:{line:12,column:4},end:{line:12,column:54}},"9":{start:{line:15,column:2},end:{line:28,column:3}},"10":{start:{line:16,column:4},end:{line:26,column:5}},"11":{start:{line:17,column:19},end:{line:17,column:32}},"12":{start:{line:18,column:6},end:{line:18,column:26}},"13":{start:{line:20,column:26},end:{line:20,column:67}},"14":{start:{line:21,column:28},end:{line:21,column:71}},"15":{start:{line:22,column:23},end:{line:22,column:62}},"16":{start:{line:23,column:21},end:{line:23,column:56}},"17":{start:{line:24,column:6},end:{line:24,column:175}},"18":{start:{line:25,column:6},end:{line:25,column:12}},"19":{start:{line:27,column:4},end:{line:27,column:58}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:3,column:17},end:{line:3,column:18}},loc:{start:{line:3,column:40},end:{line:29,column:1}},line:3},"1":{name:"(anonymous_1)",decl:{start:{line:5,column:40},end:{line:5,column:41}},loc:{start:{line:5,column:52},end:{line:10,column:3}},line:5},"2":{name:"(anonymous_2)",decl:{start:{line:11,column:21},end:{line:11,column:22}},loc:{start:{line:11,column:46},end:{line:13,column:3}},line:11},"3":{name:"(anonymous_3)",decl:{start:{line:15,column:18},end:{line:15,column:19}},loc:{start:{line:15,column:42},end:{line:28,column:3}},line:15}},branchMap:{"0":{loc:{start:{line:24,column:13},end:{line:24,column:63}},type:"binary-expr",locations:[{start:{line:24,column:13},end:{line:24,column:24}},{start:{line:24,column:28},end:{line:24,column:41}},{start:{line:24,column:45},end:{line:24,column:53}},{start:{line:24,column:57},end:{line:24,column:63}}],line:24},"1":{loc:{start:{line:24,column:65},end:{line:24,column:174}},type:"cond-expr",locations:[{start:{line:24,column:71},end:{line:24,column:125}},{start:{line:24,column:128},end:{line:24,column:174}}],line:24},"2":{loc:{start:{line:27,column:16},end:{line:27,column:57}},type:"cond-expr",locations:[{start:{line:27,column:22},end:{line:27,column:25}},{start:{line:27,column:28},end:{line:27,column:57}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"105f648527343eeac91e720d6726a2dde624eda6"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();var ethers=(cov_qoec83yrr.s[0]++,require("ethers"));cov_qoec83yrr.s[1]++;module.exports=function(chai,utils){cov_qoec83yrr.f[0]++;var assert=(cov_qoec83yrr.s[2]++,chai.assert);cov_qoec83yrr.s[3]++;chai.Assertion.addProperty('address',function(){cov_qoec83yrr.f[1]++;cov_qoec83yrr.s[4]++;this.assert(this._obj.length===42,'expected #{this} to be a 42 character address (0x...)','expected #{this} to not be a 42 character address (0x...)');var number=(cov_qoec83yrr.s[5]++,ethers.utils.bigNumberify(this._obj));cov_qoec83yrr.s[6]++;this.assert(number.eq(0)===false,'expected address #{this} to not be zero','you shouldn\'t ever see this.');});cov_qoec83yrr.s[7]++;assert.isAddress=function(val,exp,msg){cov_qoec83yrr.f[2]++;cov_qoec83yrr.s[8]++;return new chai.Assertion(val,msg).to.be.address;};cov_qoec83yrr.s[9]++;assert.revert=async(promise,msg)=>{cov_qoec83yrr.f[3]++;cov_qoec83yrr.s[10]++;try{let result=(cov_qoec83yrr.s[11]++,await promise);cov_qoec83yrr.s[12]++;console.log(result);}catch(error){const invalidJump=(cov_qoec83yrr.s[13]++,error.message.search('invalid JUMP')>=0);const invalidOpcode=(cov_qoec83yrr.s[14]++,error.message.search('invalid opcode')>=0);const outOfGas=(cov_qoec83yrr.s[15]++,error.message.search('out of gas')>=0);const revert=(cov_qoec83yrr.s[16]++,error.message.search('revert')>=0);cov_qoec83yrr.s[17]++;assert((cov_qoec83yrr.b[0][0]++,invalidJump)||(cov_qoec83yrr.b[0][1]++,invalidOpcode)||(cov_qoec83yrr.b[0][2]++,outOfGas)||(cov_qoec83yrr.b[0][3]++,revert),msg?(cov_qoec83yrr.b[1][0]++,`Expected throw, got ${error.message} instead. ${msg}`):(cov_qoec83yrr.b[1][1]++,`Expected throw, got ${error.message} instead`));cov_qoec83yrr.s[18]++;return;}cov_qoec83yrr.s[19]++;assert.fail(msg?(cov_qoec83yrr.b[2][0]++,msg):(cov_qoec83yrr.b[2][1]++,'Expected throw not received'));};};