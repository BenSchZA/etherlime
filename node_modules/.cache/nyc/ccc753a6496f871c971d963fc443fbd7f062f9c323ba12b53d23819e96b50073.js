var cov_112bsw7txn=function(){var path="/Users/desimiramitkova/Projects/etherlime/packages/etherlime/deployed-contract/contract-at.js";var hash="613952c63fa3c59ed5479edaa55c8c361c3f83e6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/packages/etherlime/deployed-contract/contract-at.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:32}},"1":{start:{line:2,column:27},end:{line:2,column:62}},"2":{start:{line:3,column:33},end:{line:3,column:59}},"3":{start:{line:5,column:32},end:{line:5,column:70}},"4":{start:{line:6,column:32},end:{line:6,column:70}},"5":{start:{line:15,column:19},end:{line:51,column:1}},"6":{start:{line:17,column:1},end:{line:27,column:2}},"7":{start:{line:18,column:2},end:{line:20,column:3}},"8":{start:{line:19,column:3},end:{line:19,column:75}},"9":{start:{line:22,column:2},end:{line:24,column:3}},"10":{start:{line:23,column:3},end:{line:23,column:69}},"11":{start:{line:26,column:2},end:{line:26,column:87}},"12":{start:{line:29,column:1},end:{line:31,column:2}},"13":{start:{line:30,column:2},end:{line:30,column:23}},"14":{start:{line:33,column:1},end:{line:47,column:2}},"15":{start:{line:34,column:19},end:{line:34,column:93}},"16":{start:{line:36,column:2},end:{line:43,column:3}},"17":{start:{line:38,column:3},end:{line:40,column:4}},"18":{start:{line:39,column:4},end:{line:39,column:91}},"19":{start:{line:42,column:3},end:{line:42,column:82}},"20":{start:{line:45,column:23},end:{line:45,column:92}},"21":{start:{line:46,column:2},end:{line:46,column:89}},"22":{start:{line:50,column:1},end:{line:50,column:81}},"23":{start:{line:53,column:0},end:{line:53,column:27}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:19},end:{line:15,column:20}},loc:{start:{line:15,column:80},end:{line:51,column:1}},line:15}},branchMap:{"0":{loc:{start:{line:17,column:1},end:{line:27,column:2}},type:"if",locations:[{start:{line:17,column:1},end:{line:27,column:2}},{start:{line:17,column:1},end:{line:27,column:2}}],line:17},"1":{loc:{start:{line:18,column:2},end:{line:20,column:3}},type:"if",locations:[{start:{line:18,column:2},end:{line:20,column:3}},{start:{line:18,column:2},end:{line:20,column:3}}],line:18},"2":{loc:{start:{line:18,column:6},end:{line:18,column:36}},type:"binary-expr",locations:[{start:{line:18,column:6},end:{line:18,column:13}},{start:{line:18,column:17},end:{line:18,column:36}}],line:18},"3":{loc:{start:{line:22,column:2},end:{line:24,column:3}},type:"if",locations:[{start:{line:22,column:2},end:{line:24,column:3}},{start:{line:22,column:2},end:{line:24,column:3}}],line:22},"4":{loc:{start:{line:29,column:1},end:{line:31,column:2}},type:"if",locations:[{start:{line:29,column:1},end:{line:31,column:2}},{start:{line:29,column:1},end:{line:31,column:2}}],line:29},"5":{loc:{start:{line:33,column:1},end:{line:47,column:2}},type:"if",locations:[{start:{line:33,column:1},end:{line:47,column:2}},{start:{line:33,column:1},end:{line:47,column:2}}],line:33},"6":{loc:{start:{line:36,column:2},end:{line:43,column:3}},type:"if",locations:[{start:{line:36,column:2},end:{line:43,column:3}},{start:{line:36,column:2},end:{line:43,column:3}}],line:36},"7":{loc:{start:{line:38,column:3},end:{line:40,column:4}},type:"if",locations:[{start:{line:38,column:3},end:{line:40,column:4}},{start:{line:38,column:3},end:{line:40,column:4}}],line:38}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"613952c63fa3c59ed5479edaa55c8c361c3f83e6"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const ethers=(cov_112bsw7txn.s[0]++,require('ethers'));const ganacheSetupConfig=(cov_112bsw7txn.s[1]++,require('./../deployer/setup.json'));const{isSigner,isProvider}=(cov_112bsw7txn.s[2]++,require('etherlime-utils'));const DeployedContractWrapper=(cov_112bsw7txn.s[3]++,require('./deployed-contract-wrapper'));const EtherlimeGanacheWrapper=(cov_112bsw7txn.s[4]++,require('./etherlime-ganache-wrapper'));/**
 * 
 * @param {*} contract 
 * @param {*} contractAddress 
 * @param {*} signer The signer to connect this contract to
 * @param {*} providerOrPort Either provider to connect a normal Deployed Contract Wrapper or the port that the etherlime ganache is run on. Defaults to 8545
 */cov_112bsw7txn.s[5]++;const contractAt=async(contract,contractAddress,signer,providerOrPort)=>{cov_112bsw7txn.f[0]++;cov_112bsw7txn.s[6]++;if(isProvider(providerOrPort)){cov_112bsw7txn.b[0][0]++;cov_112bsw7txn.s[7]++;if((cov_112bsw7txn.b[2][0]++,!signer)||(cov_112bsw7txn.b[2][1]++,!isSigner(signer))){cov_112bsw7txn.b[1][0]++;cov_112bsw7txn.s[8]++;throw new Error(`Incorrect signer supplied - ${JSON.stringify(signer)}`);}else{cov_112bsw7txn.b[1][1]++;}cov_112bsw7txn.s[9]++;if(!signer.provider){cov_112bsw7txn.b[3][0]++;cov_112bsw7txn.s[10]++;throw new Error(`Passed signer is not connected to any provider.`);}else{cov_112bsw7txn.b[3][1]++;}cov_112bsw7txn.s[11]++;return new DeployedContractWrapper(contract,contractAddress,signer,providerOrPort);}else{cov_112bsw7txn.b[0][1]++;}cov_112bsw7txn.s[12]++;if(!providerOrPort){cov_112bsw7txn.b[4][0]++;cov_112bsw7txn.s[13]++;providerOrPort=8545;}else{cov_112bsw7txn.b[4][1]++;}cov_112bsw7txn.s[14]++;if(Number.isInteger(providerOrPort)){cov_112bsw7txn.b[5][0]++;const provider=(cov_112bsw7txn.s[15]++,new ethers.providers.JsonRpcProvider(`http://localhost:${providerOrPort}`));cov_112bsw7txn.s[16]++;if(isSigner(signer)){cov_112bsw7txn.b[6][0]++;cov_112bsw7txn.s[17]++;if(!signer.provider){cov_112bsw7txn.b[7][0]++;cov_112bsw7txn.s[18]++;throw new Error(`Passed signer is not connected to current provider ${providerOrPort}`);}else{cov_112bsw7txn.b[7][1]++;}cov_112bsw7txn.s[19]++;return new EtherlimeGanacheWrapper(contract,contractAddress,signer,provider);}else{cov_112bsw7txn.b[6][1]++;}let signerInstance=(cov_112bsw7txn.s[20]++,new ethers.Wallet(ganacheSetupConfig.accounts[0].secretKey,provider));cov_112bsw7txn.s[21]++;return new EtherlimeGanacheWrapper(contract,contractAddress,signerInstance,provider);}else{cov_112bsw7txn.b[5][1]++;}cov_112bsw7txn.s[22]++;throw new Error('You have supplied invalid value for provider or port argument');};cov_112bsw7txn.s[23]++;module.exports=contractAt;