var cov_1jgndb77z6=function(){var path="/Users/desimiramitkova/Projects/etherlime/cli-commands/shape/shape.js";var hash="be7c9ba1ced27e816fcc3566324143837a1d9acd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/desimiramitkova/Projects/etherlime/cli-commands/shape/shape.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:68}},"1":{start:{line:2,column:12},end:{line:2,column:43}},"2":{start:{line:3,column:13},end:{line:3,column:28}},"3":{start:{line:4,column:13},end:{line:4,column:58}},"4":{start:{line:5,column:21},end:{line:5,column:56}},"5":{start:{line:8,column:18},end:{line:13,column:1}},"6":{start:{line:9,column:4},end:{line:9,column:50}},"7":{start:{line:10,column:4},end:{line:10,column:20}},"8":{start:{line:11,column:4},end:{line:11,column:38}},"9":{start:{line:12,column:4},end:{line:12,column:38}},"10":{start:{line:15,column:31},end:{line:18,column:1}},"11":{start:{line:16,column:4},end:{line:16,column:59}},"12":{start:{line:17,column:4},end:{line:17,column:29}},"13":{start:{line:20,column:16},end:{line:27,column:1}},"14":{start:{line:21,column:14},end:{line:21,column:41}},"15":{start:{line:23,column:4},end:{line:25,column:5}},"16":{start:{line:24,column:8},end:{line:24,column:53}},"17":{start:{line:26,column:4},end:{line:26,column:38}},"18":{start:{line:29,column:12},end:{line:37,column:1}},"19":{start:{line:31,column:15},end:{line:31,column:28}},"20":{start:{line:32,column:4},end:{line:32,column:52}},"21":{start:{line:33,column:4},end:{line:33,column:25}},"22":{start:{line:34,column:4},end:{line:34,column:34}},"23":{start:{line:35,column:4},end:{line:35,column:60}},"24":{start:{line:36,column:4},end:{line:36,column:10}},"25":{start:{line:39,column:0},end:{line:41,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:18},end:{line:8,column:19}},loc:{start:{line:8,column:33},end:{line:13,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:31},end:{line:15,column:32}},loc:{start:{line:15,column:43},end:{line:18,column:1}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:20,column:16},end:{line:20,column:17}},loc:{start:{line:20,column:31},end:{line:27,column:1}},line:20},"3":{name:"(anonymous_3)",decl:{start:{line:29,column:12},end:{line:29,column:13}},loc:{start:{line:29,column:28},end:{line:37,column:1}},line:29}},branchMap:{"0":{loc:{start:{line:23,column:4},end:{line:25,column:5}},type:"if",locations:[{start:{line:23,column:4},end:{line:25,column:5}},{start:{line:23,column:4},end:{line:25,column:5}}],line:23}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"be7c9ba1ced27e816fcc3566324143837a1d9acd"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const logger=(cov_1jgndb77z6.s[0]++,require('../../logger-service/logger-service').logger);const git=(cov_1jgndb77z6.s[1]++,require('simple-git/promise')());const util=(cov_1jgndb77z6.s[2]++,require('util'));const exec=(cov_1jgndb77z6.s[3]++,util.promisify(require('child_process').exec));const repoToUrlMap=(cov_1jgndb77z6.s[4]++,require('./urlConfig').repoToUrlMap);cov_1jgndb77z6.s[5]++;const cloneRepo=async url=>{cov_1jgndb77z6.f[0]++;cov_1jgndb77z6.s[6]++;console.log('====== Cloning repository =====');cov_1jgndb77z6.s[7]++;await git.init();cov_1jgndb77z6.s[8]++;await git.addRemote('origin',url);cov_1jgndb77z6.s[9]++;await git.pull('origin','master');};cov_1jgndb77z6.s[10]++;const installProjectsModules=async()=>{cov_1jgndb77z6.f[1]++;cov_1jgndb77z6.s[11]++;console.log('====== Installing projects modules =====');cov_1jgndb77z6.s[12]++;await exec('npm install');};cov_1jgndb77z6.s[13]++;const getRepo=framework=>{cov_1jgndb77z6.f[2]++;let url=(cov_1jgndb77z6.s[14]++,repoToUrlMap.get(framework));cov_1jgndb77z6.s[15]++;if(!url){cov_1jgndb77z6.b[0][0]++;cov_1jgndb77z6.s[16]++;throw new Error(`Invalid shape ${framework}`);}else{cov_1jgndb77z6.b[0][1]++;}cov_1jgndb77z6.s[17]++;return`https://github.com/${url}`;};cov_1jgndb77z6.s[18]++;const run=async name=>{cov_1jgndb77z6.f[3]++;let repo=(cov_1jgndb77z6.s[19]++,getRepo(name));cov_1jgndb77z6.s[20]++;console.log(`====== Shaping ${name} dApp =====`);cov_1jgndb77z6.s[21]++;await cloneRepo(repo);cov_1jgndb77z6.s[22]++;await installProjectsModules();cov_1jgndb77z6.s[23]++;console.log('====== Shaping finished successful! =====');cov_1jgndb77z6.s[24]++;return;};cov_1jgndb77z6.s[25]++;module.exports={run};